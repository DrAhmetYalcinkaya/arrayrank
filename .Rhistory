beta <- median(unlist(selected))
beta
logistic_transform <- function(x, b = beta) {
a <- ifelse(x < b/5, 0.005, ifelse(x < b, 0.0005, 0.00025))
1 / (1 + exp(-a * (x - b)))
}
logistic_trans <- Vectorize(function(x, b = beta, alt = 0.8, ust = 2) {
if (x < beta/5) {
a = 0.009
return(1 / (1 + exp(-a * (b-x))))
} else {
a = 0.002
return(alt + (ust-alt) / (1 + exp(-a * (b-x))))
}
})
log_trans <- logistic_trans(ortalamalar)
round(log_trans,4)
plot(log_trans, x=ortalamalar)
logistic_trans <- Vectorize(function(x, b = beta, alt = 0.8, ust = 2) {
if (x < beta/5) {
a = 0.009
return(1 / (1 + exp(-a * (b-x))))
} else {
a = 0.0015
return(alt + (ust-alt) / (1 + exp(-a * (b-x))))
}
})
log_trans <- logistic_trans(ortalamalar)
round(log_trans,4)
plot(log_trans, x=ortalamalar)
# 1. collect gpr data and make dataset
raw_data <- read.gpr(bgcorrect = T, fdata = "median")
wide_df <- extraction(raw_data, array_type = "huprot", format = "wide")
data <- wide_df
selected <- tolower(rownames(data)) %>%
grep("goatanti-huig", .) %>%
data[.,]
if(nrow(selected) == 0){
selected <- tolower(rownames(data)) %>%
{data[grepl("igg", .) & grepl("100ng/ul", .), ]}
}
ortalamalar <- apply(selected, 2, mean)
beta <- median(unlist(selected))
beta
logistic_trans <- Vectorize(function(x, b = beta, alt = 0.8, ust = 2) {
if (x < beta/5) {
a = 0.009
return(1 / (1 + exp(-a * (b-x))))
} else {
a = 0.0015
return(alt + (ust-alt) / (1 + exp(-a * (b-x))))
}
})
log_trans <- logistic_trans(ortalamalar)
round(log_trans,4)
plot(log_trans, x=ortalamalar)
ortalamalar
oranlar
logistic_trans <- Vectorize(function(x, b = beta, alt = 0.8, ust = 2) {
if (x < beta/5) {
a = 0.009
return(1 / (1 + exp(-a * (b-x))))
} else {
a = 0.001
return(alt + (ust-alt) / (1 + exp(-a * (b-x))))
}
})
log_trans <- logistic_trans(ortalamalar)
round(log_trans,4)
plot(log_trans, x=ortalamalar)
ortalamalar
oranlar
logistic_trans <- Vectorize(function(x, b = beta, alt = 0.8, ust = 1.8) {
if (x < beta/5) {
a = 0.009
return(1 / (1 + exp(-a * (b-x))))
} else {
a = 0.001
return(alt + (ust-alt) / (1 + exp(-a * (b-x))))
}
})
log_trans <- logistic_trans(ortalamalar)
round(log_trans,4)
plot(log_trans, x=ortalamalar)
oranlar <- max(ortalamalar) / ortalamalar
oranlar
logistic_trans <- Vectorize(function(x, b = beta, alt = 0.8, ust = 1.8) {
if (x < beta/2) {
a = 0.009
return(1 / (1 + exp(-a * (b-x))))
} else {
a = 0.001
return(alt + (ust-alt) / (1 + exp(-a * (b-x))))
}
})
log_trans <- logistic_trans(ortalamalar)
round(log_trans,4)
plot(log_trans, x=ortalamalar)
ortalamalar
beta
logistic_trans <- Vectorize(function(x, b = beta, alt = 0.8, ust = 1.8) {
if (x < beta/4) {
a = 0.009
return(1 / (1 + exp(-a * (b-x))))
} else {
a = 0.001
return(alt + (ust-alt) / (1 + exp(-a * (b-x))))
}
})
log_trans <- logistic_trans(ortalamalar)
round(log_trans,4)
plot(log_trans, x=ortalamalar)
ortalamalar
oranlar <- max(ortalamalar) / ortalamalar
oranlar
max(log_trans)
sum(log_trans < 1)
sum(log_trans > 1)
# 1. collect gpr data and make dataset
raw_data <- read.gpr(bgcorrect = T, fdata = "median")
wide_df <- extraction(raw_data, array_type = "huprot", format = "wide")
data <- wide_df
selected <- tolower(rownames(data)) %>%
grep("goatanti-huig", .) %>%
data[.,]
wide_df <- extraction(raw_data, array_type = "chambered", format = "wide")
data <- wide_df
selected <- tolower(rownames(data)) %>%
grep("goatanti-huig", .) %>%
data[.,]
if(nrow(selected) == 0){
selected <- tolower(rownames(data)) %>%
{data[grepl("igg", .) & grepl("100ng/ul", .), ]}
}
ortalamalar <- apply(selected, 2, mean)
beta <- median(unlist(selected))
beta
logistic_trans <- Vectorize(function(x, b = beta, alt = 0.8, ust = 1.8) {
if (x < beta/4) {
a = 0.009
return(1 / (1 + exp(-a * (b-x))))
} else {
a = 0.001
return(alt + (ust-alt) / (1 + exp(-a * (b-x))))
}
})
log_trans <- logistic_trans(ortalamalar)
round(log_trans,4)
plot(log_trans, x=ortalamalar)
max(log_trans)
sum(log_trans > 1)
sum(log_trans < 1)
ortalamalar
logistic_trans <- Vectorize(function(x, b = beta, alt = 0.8, ust = 1.8) {
if (x < b/4) {
a = 0.009
binary[index(x) <- F]
return(1 / (1 + exp(-a * (b-x))))
} else {
a = 0.001
binary[index(x) <- T]
return(alt + (ust-alt) / (1 + exp(-a * (b-x))))
}
})
log_trans <- logistic_trans(ortalamalar)
logistic_trans <- Vectorize(function(x, b = beta, alt = 0.8, ust = 1.8) {
if (x < b/4) {
a = 0.009
return(1 / (1 + exp(-a * (x-b))))
} else {
a = 0.001
return(alt + (ust-alt) / (1 + exp(-a * (b-x))))
}
})
log_trans <- logistic_trans(ortalamalar)
log_trans
plot(log_trans)
plot(log_trans, x = ortalamalar)
binary <- ifelse(log_trans > 0.01, T, F)
binary
round(log_trans, 4)
multinorm <- function(data, method = "quantile"){
data <- as.data.frame(data)
data[] <- lapply(data, as.numeric)
if (ncol(data) == 0 || nrow(data) == 0) {
stop("Data contains no valid numeric columns or rows.")
}
selected <- tolower(rownames(data)) %>%
grep("goatanti-huig", .) %>%
data[.,]
if(nrow(selected) == 0){
selected <- tolower(rownames(data)) %>%
{data[grepl("igg", .) & grepl("100ng/ul", .), ]}
}
ortalamalar <- apply(selected, 2, mean)
beta <- median(unlist(selected))
logistic_trans <- Vectorize(function(x, b = beta, alt = 0.8, ust = 1.8) {
if (x < b/4) {
a = 0.009
return(1 / (1 + exp(-a * (x-b))))
} else {
a = 0.001
return(alt + (ust-alt) / (1 + exp(-a * (b-x))))
}
})
log_trans <- logistic_trans(ortalamalar)
binary <- ifelse(log_trans > 0.01, T, F)
if (sum(!binary) > 0) {
post_data <- data[, binary, drop = F]
backup <- data[, !binary, drop = F]
message("Extremely low Ig responses detected in: ", paste(colnames(data)[!binary], collapse = ", "),
"\nHighly suggested to exclude these indices from the data. Normalization will continue without altering these columns.")
} else {
post_data <- data
backup <- NULL
message("No columns identified as negative controls. Proceeding with normalization.")
}
if(method == "quantile"){
normed <- as.data.frame(round(limma::normalizeQuantiles(post_data),1))
data[, binary] <- normed
output <- round(data,1)
message("Normalized each column (observations) with limma-Quantile.")
} else if(method == "arrays"){
normed <- as.data.frame(round(limma::normalizeBetweenArrays(post_data),1))
data[, binary] <- normed
output <- round(data,1)
message("Normalized between arrays (Blocks or Huprot) with limma-BetweenArrays.")
} else if(method == "ig"){
df2 <- df <- data
for(i in 1:ncol(df)){
df2[, i] <- df[, i] * log_trans[i]
output <- round(df2,1)
}
message("Normalized for Ig values.")
} else {
message("Please define normalization variables correctly.")
}
return(output)
}
qnorm_df <- multinorm(corr_df, method= "ig")
# 2. data correction
corr_df <- replace.low(wide_df, offset = 10)
qnorm_df <- multinorm(corr_df, method= "ig")
View(qnorm_df)
max(qnorm_df)
min(qnorm_df)
multinorm <- function(data, method = "quantile"){
data <- as.data.frame(data)
data[] <- lapply(data, as.numeric)
if (ncol(data) == 0 || nrow(data) == 0) {
stop("Data contains no valid numeric columns or rows.")
}
selected <- tolower(rownames(data)) %>%
grep("goatanti-huig", .) %>%
data[.,]
if(nrow(selected) == 0){
selected <- tolower(rownames(data)) %>%
{data[grepl("igg", .) & grepl("100ng/ul", .), ]}
}
ortalamalar <- apply(selected, 2, mean)
beta <- median(unlist(selected))
logistic_trans <- Vectorize(function(x, b = beta, alt = 0.8, ust = 1.8) {
if (x < b/4) {
a = 0.009
return(1 / (1 + exp(-a * (x-b))))
} else {
a = 0.001
return(alt + (ust-alt) / (1 + exp(-a * (b-x))))
}
})
log_trans <- logistic_trans(ortalamalar)
binary <- ifelse(log_trans > 0.01, T, F)
if (sum(!binary) > 0) {
post_data <- data[, binary, drop = F]
backup <- data[, !binary, drop = F]
message("Extremely low Ig responses detected in: ", paste(colnames(data)[!binary], collapse = ", "),
"\nHighly suggested to exclude these indices from the data. Normalization will continue without altering these columns.")
} else {
post_data <- data
backup <- NULL
message("No columns identified as negative controls. Proceeding with normalization.")
}
if(method == "quantile"){
normed <- as.data.frame(round(limma::normalizeQuantiles(post_data),1))
data[, binary] <- normed
output <- round(data,1)
message("Normalized each column (observations) with limma-Quantile.")
} else if(method == "arrays"){
normed <- as.data.frame(round(limma::normalizeBetweenArrays(post_data),1))
data[, binary] <- normed
output <- round(data,1)
message("Normalized between arrays (Blocks or Huprot) with limma-BetweenArrays.")
} else if(method == "ig"){
df <- data
for(i in 1:ncol(df)){
k <- ifelse(log_trans < 0.1, 1, 0)
df[, i] <- data[, i] * k[i]
output <- round(df2,1)
}
message("Normalized for Ig values.")
} else {
message("Please define normalization variables correctly.")
}
return(output)
}
qnorm_df <- multinorm(corr_df, method= "ig")
qnorm_df <- multinorm(corr_df, method= "ig")
multinorm <- function(data, method = "quantile"){
data <- as.data.frame(data)
data[] <- lapply(data, as.numeric)
if (ncol(data) == 0 || nrow(data) == 0) {
stop("Data contains no valid numeric columns or rows.")
}
selected <- tolower(rownames(data)) %>%
grep("goatanti-huig", .) %>%
data[.,]
if(nrow(selected) == 0){
selected <- tolower(rownames(data)) %>%
{data[grepl("igg", .) & grepl("100ng/ul", .), ]}
}
ortalamalar <- apply(selected, 2, mean)
beta <- median(unlist(selected))
logistic_trans <- Vectorize(function(x, b = beta, alt = 0.8, ust = 1.8) {
if (x < b/4) {
a = 0.009
return(1 / (1 + exp(-a * (x-b))))
} else {
a = 0.001
return(alt + (ust-alt) / (1 + exp(-a * (b-x))))
}
})
log_trans <- logistic_trans(ortalamalar)
binary <- ifelse(log_trans > 0.01, T, F)
if (sum(!binary) > 0) {
post_data <- data[, binary, drop = F]
backup <- data[, !binary, drop = F]
message("Extremely low Ig responses detected in: ", paste(colnames(data)[!binary], collapse = ", "),
"\nHighly suggested to exclude these indices from the data. Normalization will continue without altering these columns.")
} else {
post_data <- data
backup <- NULL
message("No columns identified as negative controls. Proceeding with normalization.")
}
if(method == "quantile"){
normed <- as.data.frame(round(limma::normalizeQuantiles(post_data),1))
data[, binary] <- normed
output <- round(data,1)
message("Normalized each column (observations) with limma-Quantile.")
} else if(method == "arrays"){
normed <- as.data.frame(round(limma::normalizeBetweenArrays(post_data),1))
data[, binary] <- normed
output <- round(data,1)
message("Normalized between arrays (Blocks or Huprot) with limma-BetweenArrays.")
} else if(method == "ig"){
df <- data
for(i in 1:ncol(df)){
k <- ifelse(log_trans < 0.1, 1, log_trans)
df[, i] <- data[, i] * k[i]
output <- round(df2,1)
}
message("Normalized for Ig values.")
} else {
message("Please define normalization variables correctly.")
}
return(output)
}
qnorm_df <- multinorm(corr_df, method= "ig")
# 1. collect gpr data and make dataset
raw_data <- read.gpr(bgcorrect = T, fdata = "median")
wide_df <- extraction(raw_data, array_type = "chambered", format = "wide")
# 1b. identify discordant duplicates in data (to cross-check with ultimate output)
discordants <- discordant(raw_data, array_type = "chambered", fold = 1.5, abs = 1000)
# 2. data correction
corr_df <- replace.low(wide_df, offset = 10)
qnorm_df <- multinorm(corr_df, method= "ig")
View(qnorm_df)
min(qnorm_df)
max(qnorm_df)
devtools::install_github("DrAhmetYalcinkaya/arrayrank")
library(roxygen2)
library(devtools)
roxygenize()
build()
roxygenize()
build()
roxygenize()
build()
check()
library(arrayrank)
# 1. collect gpr data and make dataset
raw_data <- read.gpr(bgcorrect = T, fdata = "median")
wide_df <- extraction(raw_data, array_type = "chambered", format = "wide")
# 1b. identify discordant duplicates in data (to cross-check with ultimate output)
discordants <- discordant(raw_data, array_type = "chambered", fold = 1.5, abs = 1000)
# 2. data correction
corr_df <- replace.low(wide_df, offset = 10)
qnorm_df <- multinorm(corr_df, method= "ig")
max(qnorm_df)
View(qnorm_df)
median(unlist(qnorm_df))
View(wide_df)
View(corr_df)
View(qnorm_df)
library(dplyr)
data <- corr_df
selected <- tolower(rownames(data)) %>%
grep("goatanti-huig", .) %>%
data[.,]
View(selected)
ortalamalar <- apply(selected, 2, mean)
beta <- median(unlist(selected))
ortalamalar
logistic_trans <- Vectorize(function(x, b = beta, alt = 0.8, ust = 1.8) {
if (x < b/4) {
a = 0.009
return(1 / (1 + exp(-a * (x-b))))
} else {
a = 0.001
return(alt + (ust-alt) / (1 + exp(-a * (b-x))))
}
})
log_trans <- logistic_trans(ortalamalar)
log_trans
round(log_trans,4)
df <- data
for(i in 1:ncol(df)){
k <- ifelse(log_trans < 0.1, 1, log_trans)
df[, i] <- data[, i] * k[i]
output <- round(df2,1)
}
max(corr_df)
for(i in 1:ncol(df)){
k <- ifelse(log_trans < 0.1, 1, log_trans)
df[, i] <- data[, i] * k[i]
output <- round(df,1)
}
View(output)
max(output)
multinorm <- function(data, method = "quantile"){
data <- as.data.frame(data)
data[] <- lapply(data, as.numeric)
if (ncol(data) == 0 || nrow(data) == 0) {
stop("Data contains no valid numeric columns or rows.")
}
selected <- tolower(rownames(data)) %>%
grep("goatanti-huig", .) %>%
data[.,]
if(nrow(selected) == 0){
selected <- tolower(rownames(data)) %>%
{data[grepl("igg", .) & grepl("100ng/ul", .), ]}
}
ortalamalar <- apply(selected, 2, mean)
beta <- median(unlist(selected))
logistic_trans <- Vectorize(function(x, b = beta, alt = 0.8, ust = 1.8) {
if (x < b/4) {
a = 0.009
return(1 / (1 + exp(-a * (x-b))))
} else {
a = 0.001
return(alt + (ust-alt) / (1 + exp(-a * (b-x))))
}
})
log_trans <- logistic_trans(ortalamalar)
binary <- ifelse(log_trans > 0.01, T, F)
if (sum(!binary) > 0) {
post_data <- data[, binary, drop = F]
backup <- data[, !binary, drop = F]
message("Extremely low Ig responses detected in: ", paste(colnames(data)[!binary], collapse = ", "),
"\nHighly suggested to exclude these indices from the data. Normalization will continue without altering these columns.")
} else {
post_data <- data
backup <- NULL
message("No columns identified as negative controls. Proceeding with normalization.")
}
if(method == "quantile"){
normed <- as.data.frame(round(limma::normalizeQuantiles(post_data),1))
data[, binary] <- normed
output <- round(data,1)
message("Normalized each column (observations) with limma-Quantile.")
} else if(method == "arrays"){
normed <- as.data.frame(round(limma::normalizeBetweenArrays(post_data),1))
data[, binary] <- normed
output <- round(data,1)
message("Normalized between arrays (Blocks or Huprot) with limma-BetweenArrays.")
} else if(method == "ig"){
df <- data
for(i in 1:ncol(df)){
k <- ifelse(log_trans < 0.1, 1, log_trans)
df[, i] <- data[, i] * k[i]
output <- round(df,1)
}
message("Normalized for Ig values.")
} else {
message("Please define normalization variables correctly.")
}
return(output)
}
qnorm_df2 <- multinorm(corr_df, method= "ig")
View(qnorm_df2)
View(qnorm_df)
View(qnorm_df2)
plot(log_trans, x = ortalamalar)
max(corr_df)
max(qnorm_df)
max(qnorm_df2)
median(unlist(qnorm_df))
median(unlist(qnorm_df2))
library(roxygen2)
library(devtools)
roxygenize()
build()
check()
