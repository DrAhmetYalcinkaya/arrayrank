colnames(dtlong[,6]) <- c("array_name")
View(dtlong)
colnames(dtlong)[6] <- "array_name"
grouped <- dt2 %>% group_by(Block, array_name)
grouped <- dtlong %>% group_by(Block, array_name)
View(grouped)
grouped <- order(dtlong, Block)
grouped <- order(dtlong, by = Block)
?order()
# Calculate absolute difference between duplicates
result_diff <- grouped %>%
group_by(Block, array_name) %>%
summarize(difference = abs(diff(value)), .groups = 'drop')
View(result_diff)
# Calculate absolute difference between duplicates
result_diff <- grouped %>%
group_by(Block, array_name, Name) %>%
summarize(difference = abs(diff(value)), .groups = 'drop')
View(result_diff)
View(result_diff)
View(result_diff)
View(result_diff)
# Calculate absolute difference between duplicates
result_diff <- grouped %>%
group_by(Block, array_name, Name) %>%
summarize(difference = abs(diff(value)))
View(result_diff)
# Calculate absolute difference between duplicates
result_diff <- grouped %>%
group_by(Block, array_name, Name) %>%
summarize(difference = mean(value)))
# Calculate absolute difference between duplicates
result_diff <- grouped %>%
group_by(Block, array_name, Name) %>%
summarize(difference = mean(value))
View(result_diff)
result_ratio <- grouped %>%
group_by(array_name, Block, Name) %>%
filter(n() == 2) %>%  # Ensure that only groups with 2 duplicates are considered
summarize(ratio = ifelse(value[2] == 0, NA, value[1] / value[2]), .groups = 'drop')  # Handle division by zero
View(result_ratio)
result_ratio <- grouped %>%
group_by(array_name,Block, Name) %>%
filter(n() == 2) %>%  # Ensure that only groups with 2 duplicates are considered
summarize(
ratio = ifelse(value[2] == 0, NA, value[1] / value[2]),  # Calculate the ratio
abs_diff = abs(value[1] - value[2]),  # Calculate the absolute difference
.groups = 'drop'
)
View(result_ratio)
discordants <- result_ratio %>%
mutate(flag = ifelse((ratio > 2 || ratio < 0.5)) && (abs_diff > 3000), T, F)
discordants <- result_ratio %>%
mutate(flag = ifelse((ratio > 2 || ratio < 0.5) && (abs_diff > 3000), T, F))
discordants <- result_ratio %>%
mutate(flag = ifelse((ratio > 2 || ratio < 0.5) & (abs_diff > 3000), T, F))
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 || ratio < 0.5) & abs_diff > 3000), T, F))
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & abs_diff > 3000), T, F))
View(discordants)
disc <- subset(discordants, flag ==T)
View(disc)
result_ratio <- grouped %>%
group_by(array_name,Block, Name) %>%
filter(n() == 2) %>%  # Ensure that only groups with 2 duplicates are considered
summarize(
mean = mean(value)
ratio = ifelse(value[2] == 0, NA, value[1] / value[2]),  # Calculate the ratio
result_ratio <- grouped %>%
group_by(array_name,Block, Name) %>%
filter(n() == 2) %>%  # Ensure that only groups with 2 duplicates are considered
summarize(
mean = mean(value),
ratio = ifelse(value[2] == 0, NA, value[1] / value[2]),  # Calculate the ratio
abs_diff = abs(value[1] - value[2]),  # Calculate the absolute difference
.groups = 'drop'
)
View(result_ratio)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & abs_diff > 3000), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & abs_diff > 1000), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
result_ratio <- grouped %>%
group_by(array_name,Block, Name) %>%
filter(n() == 2) %>%  # Ensure that only groups with 2 duplicates are considered
summarize(
mean = mean(value),
ratio = ifelse(value[2] == 0, NA, round(value[1] / value[2]), 2),  # Calculate the ratio
abs_diff = abs(value[1] - value[2]),  # Calculate the absolute difference
.groups = 'drop'
)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & abs_diff > 1000), T, F))
result_ratio <- grouped %>%
result_ratio <- grouped %>%
rlang::last_trace()
result_ratio <- grouped %>%
result_ratio <- grouped %>%
group_by(array_name,Block, Name) %>%
filter(n() == 2) %>%  # Ensure that only groups with 2 duplicates are considered
summarize(
mean = mean(value),
ratio = ifelse(value[2] == 0, NA, value[1] / value[2]),  # Calculate the ratio
abs_diff = abs(value[1] - value[2]),  # Calculate the absolute difference
.groups = 'drop'
)
result_ratio <- grouped %>%
group_by(array_name,Block, Name) %>%
filter(n() == 2) %>%  # Ensure that only groups with 2 duplicates are considered
summarize(
mean = mean(value),
ratio = ifelse(value[2] == 0, NA, value[1] / value[2]),  # Calculate the ratio
abs_diff = abs(value[1] - value[2]),  # Calculate the absolute difference
.groups = 'drop'
)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & abs_diff > 1000), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
result_ratio <- grouped %>%
group_by(array_name,Block, Name) %>%
filter(n() == 2) %>%  # Ensure that only groups with 2 duplicates are considered
summarize(
mean = mean(value),
ratio = ifelse(value[2] == 0, 0, round((value[1] / value[2]), 2)),  # Calculate the ratio
abs_diff = abs(value[1] - value[2]),  # Calculate the absolute difference
.groups = 'drop'
)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & abs_diff > 1000), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
df <- raw_data$genes
#' @import data.table
#' @import tidyr
#' @import writexl
#' @import readxl
#'
#' @examples
#' \dontrun{
#' # Run the function to select a directory and read .gpr files
#' raw_data <- read.gpr()
#' }
read.gpr <- function(bgcorrect = T) {
if (.Platform$OS.type == "windows") {
directory <- choose.dir()
} else {
directory <- tk_choose.dir()
}
if (is.na(directory) || directory == "") {
return(NULL)
}
files <- list.files(path = directory, pattern = "*.gpr", full.names = T, include.dirs = F)
if (length(files) == 0) {
message("No .gpr files found in the selected directory.")
return(NULL)
}
raw_data <- limma::read.maimages(files, source = "genepix")
raw_data$targets$FileName <- basename(raw_data$targets$FileName)
elements <- c("R", "G", "Rb", "Gb")
if (all(elements %in% names(raw_data)) & bgcorrect == T) {
message("Red, Green channels and background data found to exist, user requested bg correction; subtracting background.")
post_bg <- limma::backgroundCorrect(raw_data, method = "subtract")
} else {
message("No background subtration performed.")
post_bg <- raw_data
}
return(post_bg)
}
# 1. collect gpr data and make dataset
raw_data <- read.gpr(bgcorrect = T)
df <- dataframe(raw_data$genes, raw_data$R)
df <- data.frame(raw_data$genes, raw_data$R)
View(df)
colnames(df) <- basename(colnames(df))
View(df)
df <- data.frame(raw_data$genes, raw_data$R)
colnames(df) <- basename(colnames(df))
View(df)
View(raw_data)
View(df)
colnames(df) <- basename(colnames(df))
View(df)
basename(colnames(df))
columns <- c(colnames(raw_data$genes), basename(raw_data$R))
View(raw_data)
df <- raw_data$genes
merged_df <- cbind(df, raw_data$R)
View(merged_df)
colnames(merged_df) <- basename(colnames(merged_df))
View(merged_df)
long_df <- pivot_longer(merged_df, cols = 6:ncol(dt2))
long_df <- pivot_longer(merged_df, cols = 6:ncol(merged_df))
View(long_df)
colnames(long_df)[6] <- "array_name"
View(long_df)
result_ratio <- grouped %>%
group_by(array_name,Block, Name) %>%
filter(n() == 2) %>%  # Ensure that only groups with 2 duplicates are considered
summarize(
mean = mean(value),
ratio = ifelse(value[2] == 0, 0, round((value[1] / value[2]), 2)),  # Calculate the ratio
abs_diff = abs(value[1] - value[2]),  # Calculate the absolute difference
.groups = 'drop'
)
result_ratio <- long_df %>%
group_by(array_name,Block, Name) %>%
filter(n() == 2) %>%  # Ensure that only groups with 2 duplicates are considered
summarize(
mean = mean(value),
ratio = ifelse(value[2] == 0, 0, round((value[1] / value[2]), 2)),  # Calculate the ratio
abs_diff = abs(value[1] - value[2]),  # Calculate the absolute difference
.groups = 'drop'
)
result_ratio <- long_df %>%
group_by(array_name,Block, Name) %>%
filter(n() == 2) %>%  # Ensure that only groups with 2 duplicates are considered
summarize(
mean = mean(value),
ratio = ifelse(value[2] == 0, 0, round((value[1] / value[2]), 2)),  # Calculate the ratio
abs_diff = abs(value[1] - value[2]),  # Calculate the absolute difference
.groups = 'drop'
)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & abs_diff > 1000), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & abs_diff > (0.5*mean)), T, F))
disc <- subset(discordants, flag ==T)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & (abs_diff > (0.5*mean) & abs_diff > 1000)), T, F))
disc <- subset(discordants, flag ==T)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & (abs_diff > (0.5*mean) & abs_diff > 500)), T, F))
disc <- subset(discordants, flag ==T)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & (abs_diff > (0.5*mean) & mean > 1000)), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
View(discordants)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & (abs_diff > (0.25*mean) & mean > 1000)), T, F))
disc <- subset(discordants, flag ==T)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & (abs_diff > (0.1*mean) & mean > 1000)), T, F))
disc <- subset(discordants, flag ==T)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & (abs_diff > (0.01*mean) & mean > 1000)), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & (abs_diff > (0.01*mean))), T, F))
disc <- subset(discordants, flag ==T)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & (abs_diff > (0.1*mean))), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & (abs_diff > (3*mean))), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
result_ratio <- long_df %>%
group_by(array_name,Block, Name) %>%
filter(n() == 2) %>%
summarize(
mean = mean(value),
ratio = ifelse(last(value) == 0, 0, abs(round((first(value) / last(value))), 2)),
abs_diff = abs(first(value) - last(value)),
.groups = 'drop'
)
result_ratio <- long_df %>%
group_by(array_name,Block, Name) %>%
filter(n() == 2) %>%
summarize(
mean = mean(value),
ratio = ifelse(last(value) == 0, 0, round(abs(first(value) / last(value)), 2)),
abs_diff = abs(first(value) - last(value)),
.groups = 'drop'
)
result_ratio <- long_df %>%
group_by(array_name,Block, Name) %>%
filter(n() == 2) %>%
summarize(
mean = mean(value),
ratio = ifelse(last(value) == 0, 0, round(abs(first(value) / last(value)), 2)),
abs_diff = abs(first(value) - last(value)),
.groups = 'drop'
)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & (abs_diff > (3*mean))), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
result_ratio <- long_df %>%
group_by(array_name,Block, Name) %>%
filter(n() == 2) %>%
summarize(
dup_mean = mean(value),
ratio = ifelse(last(value) == 0, 0, round(abs(first(value) / last(value)), 2)),
abs_diff = abs(first(value) - last(value)),
.groups = 'drop'
)
View(result_ratio)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & (abs_diff > dup_mean)), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5 | ratio < 0.67) & (abs_diff > dup_mean)), T, F))
disc <- subset(discordants, flag ==T)
result_ratio <- long_df %>%
group_by(array_name,Block, Name) %>%
filter(n() == 2) %>%
summarize(
dup_mean = mean(value),
ratio = ifelse(last(value) == 0, 0, round(abs(max(value) / min(value)), 2)),
abs_diff = abs(first(value) - last(value)),
.groups = 'drop'
)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5 | ratio < 0.67) & (abs_diff > dup_mean)), T, F))
disc2 <- subset(discordants, flag ==T)
View(disc2)
View(disc)
View(disc2)
result_ratio <- long_df %>%
group_by(array_name,Block, Name) %>%
filter(n() == 2) %>%
summarize(
dup_mean = mean(value),
ratio = ifelse(min(value) == 0, 999, round(abs(max(value) / min(value)), 2)),
abs_diff = abs(first(value) - last(value)),
.groups = 'drop'
)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5 | ratio < 0.67) & (abs_diff > dup_mean)), T, F))
disc2 <- subset(discordants, flag ==T)
result_ratio <- long_df %>%
group_by(array_name,Block, Name) %>%
filter(n() == 2) %>%
summarize(
dup_mean = mean(value),
ratio = ifelse(min(value) == 0, 999, round(abs(max(value) / min(value)), 2)),
abs_diff = abs(first(value) - last(value)),
.groups = 'drop'
)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5 | ratio < 0.67) & (abs_diff > 50)), T, F))
disc <- subset(discordants, flag ==T)
View(disc2)
View(disc)
View(disc2)
View(disc)
View(disc2)
View(disc)
View(discordants)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5 | ratio < 0.67) & (abs_diff > dup_mean)), T, F))
disc <- subset(discordants, flag ==T)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5 | ratio < 0.67) & (abs_diff > dup_mean*0.5)), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5 | ratio < 0.67) & ((abs_diff > dup_mean*0.5) & (mean > 50))), T, F))
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5 | ratio < 0.67) & ((abs_diff > dup_mean*0.5) & (dup_mean > 50))), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5) & ((abs_diff > dup_mean*0.5) & (dup_mean > 50))), T, F))
disc <- subset(discordants, flag ==T)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5) & ((abs_diff > dup_mean*0.5) & (dup_mean > 250))), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5) & ((abs_diff > dup_mean*3) & (dup_mean > 250))), T, F))
disc <- subset(discordants, flag ==T)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5) & ((abs_diff > dup_mean*1.5) & (dup_mean > 250))), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5) & ((abs_diff > dup_mean) & (dup_mean > 250))), T, F))
disc <- subset(discordants, flag ==T)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5) & ((abs_diff > dup_mean*0.25) & (dup_mean > 250))), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
user_ratio <- 1.5
user_abs <- 250
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5 & ratio > user_ratio) & ((abs_diff > dup_mean*0.25) & (dup_mean > 250) & abs_diff > user_abs)), T, F))
disc <- subset(discordants, flag ==T)
user_ratio <- 1.5
user_abs <- 0
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5 & ratio > user_ratio) & ((abs_diff > dup_mean*0.25) & (dup_mean > 250) & abs_diff > user_abs)), T, F))
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5) & ((abs_diff > dup_mean*0.25) & (dup_mean > 250))), T, F))
disc <- subset(discordants, flag ==T)
user_ratio <- 1.5
user_abs <- 0
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5 & ratio > user_ratio) & ((abs_diff > dup_mean*0.25) & (dup_mean > 250))), T, F))
disc2 <- subset(discordants, flag ==T)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5 | ratio > user_ratio) & ((abs_diff > dup_mean*0.25 | abs_diff > user_abs) & (dup_mean > 250))), T, F))
disc2 <- subset(discordants, flag ==T)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5 | ratio > user_ratio) &
((abs_diff > dup_mean*0.25 | abs_diff > user_abs) & (dup_mean > 250))), T, F))
disc2 <- subset(discordants, flag ==T)
View(disc2)
View(disc)
View(disc2)
View(disc)
View(disc2)
View(result_ratio)
#' @import data.table
#' @import tidyr
#' @import writexl
#' @import readxl
#'
#' @examples
#' \dontrun{
#' # Run the function to select a directory and read .gpr files
#' raw_data <- read.gpr()
#' }
read.gpr <- function(bgcorrect = T) {
if (.Platform$OS.type == "windows") {
directory <- choose.dir()
} else {
directory <- tk_choose.dir()
}
if (is.na(directory) || directory == "") {
return(NULL)
}
files <- list.files(path = directory, pattern = "*.gpr", full.names = T, include.dirs = F)
if (length(files) == 0) {
message("No .gpr files found in the selected directory.")
return(NULL)
}
raw_data <- limma::read.maimages(files, source = "genepix")
raw_data$targets$FileName <- basename(raw_data$targets$FileName)
elements <- c("R", "G", "Rb", "Gb")
if (all(elements %in% names(raw_data)) & bgcorrect == T) {
message("Red, Green channels and background data found to exist, user requested bg correction; subtracting background.")
post_bg <- limma::backgroundCorrect(raw_data, method = "subtract")
} else {
message("No background subtration performed.")
post_bg <- raw_data
}
return(post_bg)
}
raw_data <- read.gpr()
library(dplyr)
library(tidyr)
raw_data <- read.gpr()
df <- raw_data$genes
merged_df <- cbind(df, raw_data$R)
colnames(merged_df) <- basename(colnames(merged_df))
View(merged_df)
long_df <- pivot_longer(merged_df, cols = 6:ncol(merged_df))
View(long_df)
colnames(long_df)[6] <- "array_name"
View(long_df)
result_ratio <- long_df %>%
group_by(array_name, Block, Name) %>%
filter(n() == 2) %>%
summarize(
dup_mean = mean(value),
ratio = ifelse(min(value) == 0, 999, round(abs(max(value) / min(value)), 2)),
abs_diff = abs(first(value) - last(value)),
.groups = 'drop'
)
View(result_ratio)
discordant_flag <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5) & ((abs_diff > dup_mean*0.25) & (dup_mean > 250))), T, F))
disc <- subset(discordant_flag, flag ==T)
View(disc)
View(discordant_flag)
writexl::write_xlsx(discordant_flag, "Complete_discordants.xlsx")
writexl::write_xlsx(disc, "discordant_TorF_Sjogren.xlsx")
discordant <- function(data, fold = 1.5, abs = 500){
df <- data$genes
merged_df <- cbind(df, data$R)
colnames(merged_df) <- basename(colnames(merged_df))
long_df <- pivot_longer(merged_df, cols = 6:ncol(merged_df))
colnames(long_df)[6] <- "array_name"
result <- long_df %>%
group_by(array_name, Block, Name) %>%
filter(n() == 2) %>%
summarize(
dup_mean = mean(value),
ratio = ifelse(min(value) == 0, 999, round(abs(max(value) / min(value)), 2)),
abs_diff = abs(first(value) - last(value)),
.groups = 'drop'
)
flagged <- result %>%
mutate(flag = ifelse(((ratio > fold | ratio > fold) &
((abs_diff > dup_mean*0.25 | abs_diff > abs) &
(dup_mean > 250))), T, F))
disc <- subset(flagged, flag ==T)
return(disc)
}
