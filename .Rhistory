library(arrayhits)
detach("package:arrayhits", unload = TRUE)
library(arrayhits)
detach("package:arrayhits", unload = TRUE)
install.packages(arrayrank)
library(roxygen2)
reoxygenize()
roxygenize()
build()
library(devtools)
build()
install.packages(arrayrank)
install()
install.packages(arrayrank)
library(arrayrank)
arrayrank::read.gpr()
installed.packages()["arrayrank", ]
installed.packages(arrayrank)
install.packages("arrayrank")
library(arrayrank)
roxygenize()
library(roxygen2)
library(devtools)
library(devtools)
roxygenize()
roxygenize()
build()
check()
install.packages("arrayrank")
uninstall("arrayrank")
remove.packages("arrayhits")
remove.packages("arrayrank")
install.packages("arrayrank")
install.packages("arrayrank")
devtools::install_github("DrAhmetYalcinkaya/arrayrank")
devtools::install_github("DrAhmetYalcinkaya/arrayrank")
devtools::install_github("DrAhmetYalcinkaya/arrayrank")
read.gpr()
library(arrayrank)
files <- read.gpr()
bg <- subtract.bg(files)
df <- make.df(bg)
df <- extraction(bg)
df2 <- make.df(df)
df2 <- make.df(df, "chambered")
View(df)
View(df)
df2 <- arrayrank::make.df(df, "chambered")
df2 <- make.df(df, "chambered")
#' @export
#'
#' @examples
#' \dontrun{
#' # Example usage for chambered/segmented arrays
#' processed_data <- make.df(data = your_data, array_type = "chambered")
#'
#' # Example usage for huprot arrays
#' processed_data <- make.df(data = your_data, array_type = "huprot")
#' }
make.df <- function(data, array_type){
# Convert data to data.table format
df <- data.table::setDT(data)
# Validate array_type parameter
if (!(array_type %in% c("chambered", "segmented", "huprot"))) {
stop("Invalid array_type. Please specify 'chambered', 'segmented', or 'huprot'.")
}
# Define required columns based on array type
required_columns <- if (array_type %in% c("chambered", "segmented")) {
c("array", "Block", "Name", "value")
} else {
c("array", "Name", "value")
}
# Check if the data contains the required columns
if (!all(required_columns %in% colnames(df))) {
stop(paste("Data must contain the following columns:", paste(required_columns, collapse = ", ")))
}
if (array_type == "chambered" || array_type == "segmented") {
long_result <- df[, .(Mvalue = mean(value, na.rm = TRUE)), by = .(array, Block, Name)]
wide_result <- long_result %>% pivot_wider(names_from = Name, values_from = Mvalue)
message("Data calculated/arranged for chambered/segmented arrays")
transposed_result <- as.data.frame(t(wide_result))
array <- paste(sep="", "Arr",sapply(transposed_result[1,], function(x) gsub("[^0-9]","", x)))
new_colname <- gsub(" ", "", paste(array, "Block", transposed_result[2,], sep="-"))
corrected_transposed_result <- transposed_result[c(-1,-2),]
data.table::setnames(corrected_transposed_result, new_colname)
numeric_df <- as.data.frame(lapply(corrected_transposed_result, as.numeric))
numeric_df <- as.data.frame(apply(numeric_df, 2, function(x) round(x, 2)))
rownames(numeric_df) <- rownames(corrected_transposed_result)
} else if (array_type == "huprot") {
long_result <- df[, .(Mvalue = mean(value, na.rm = TRUE)), by = .(array, Name)]
wide_result <- long_result %>% pivot_wider(names_from = Name, values_from = Mvalue)
message("Data calculated/arranged for huprot arrays")
transposed_result <- as.data.frame(t(wide_result))
array <- paste(sep="", "Arr",sapply(transposed_result[1,], function(x) gsub("[^0-9]","", x)))
new_colname <- array
corrected_transposed_result <- transposed_result[-1,]
data.table::setnames(corrected_transposed_result, new_colname)
numeric_df <- as.data.frame(lapply(corrected_transposed_result, as.numeric))
numeric_df <- as.data.frame(apply(numeric_df, 2, function(x) round(x, 2)))
rownames(numeric_df) <- rownames(corrected_transposed_result)
} else {
stop("Please define array type. Supports 'chambered', 'segmented', or 'huprot'")
}
if (nrow(numeric_df) == 0) {
warning("The resulting data frame is empty after processing.")
}
return(numeric_df)
}
df2 <- make.df(df, "chambered")
library(tidy)
library(tidyr)
df2 <- make.df(df, "chambered")
remove.packages("arrayrank")
library(roxygen2)
library(devtools)
roxygenize()
roxygenize()
build()
check()
devtools::install_github("DrAhmetYalcinkaya/arrayrank")
remove.packages("arrayrank")
devtools::install_github("DrAhmetYalcinkaya/arrayrank")
install.packages(c("cli", "rlang"))
install.packages(c("cli", "rlang"))
devtools::install_github("DrAhmetYalcinkaya/arrayrank")
library(arrayrank)
files <- read.gpr()
files <- read.gpr()
bg <- subtract.bg(files)
df <- extraction(bg)
df2 <- make.df(df, "chambered")
View(df2)
View(df)
View(bg)
View(df)
View(df2)
df3 <- multinorm(df2, method= "protein", protein = 447)
View(df3)
remove.packages("arrayrank")
remove.packages("arrayrank")
devtools::install_github("DrAhmetYalcinkaya/arrayrank")
devtools::install_github("DrAhmetYalcinkaya/arrayrank")
detach("package:arrayrank", unload = TRUE)
remove.packages("arrayrank")
remove.packages("arrayrank")
detach("package:arrayrank", unload = TRUE)
devtools::install_github("DrAhmetYalcinkaya/arrayrank")
