library(arrayrank)
# 1. collect gpr data and make dataset
raw_data <- read.gpr(bgcorrect = T, fdata = "median")
wide_df <- extraction(raw_data, array_type = "huprot", format = "wide")
# 2. data correction
corr_df <- replace.low(wide_df, offset = 10)
qnorm_df <- multinorm(corr_df, method= "quantile")
ignorm_df <- multinorm(corr_df, method= "ig")
# 3. storage and backup
qstore_df <- store.df(qnorm_df)
writexl::write_xlsx(qstore_df, "SASH_RELB_IPEX_analysis_with_BDs_qnorm.xlsx")
igstore_df <- store.df(ignorm_df)
writexl::write_xlsx(igstore_df, "SASH_RELB_IPEX_analysis_with_BDs_ignorm.xlsx")
#########################
# 4. read data from backup file
q_data <- readxl::read_xlsx(choose.files())
ig_data <- readxl::read_xlsx(choose.files())
# 5. read group info from excel (if you want to provide a vector defining the sample groups)
groups <- readxl::read_xlsx(choose.files())
groupsv <- t(groups[,2]) ### note: read/create/edit the character vector based on your own requirements!!!
############### Results
# SASH3 qnorm
SASH3_results_qnorm <- detect.hits(q_data, controls = "BD", group_vector = groupsv,
examine = "SASH3", sdmean = 0.5, fold_threshold = 5, absolute_threshold = 5000, min_mean = 50)
# SASH3 ignorm
SASH3_results_ignorm <- detect.hits(ig_data, controls = "BD", group_vector = groupsv,
examine = "SASH3", sdmean = 0.5, fold_threshold = 5, absolute_threshold = 5000, min_mean = 50)
# RELB qnorm
RELB_results_qnorm <- detect.hits(q_data, controls = "BD", group_vector = groupsv,
examine = "RELB", sdmean = 0.5, fold_threshold = 5, absolute_threshold = 5000, min_mean = 50)
# RELB ignorm
RELB_results_ignorm <- detect.hits(ig_data, controls = "BD", group_vector = groupsv,
examine = "RELB", sdmean = 0.5, fold_threshold = 5, absolute_threshold = 5000, min_mean = 50)
#IPEX qnorm
IPEX_results_qnorm <- detect.hits(q_data, controls = "BD", group_vector = groupsv,
examine = "IPEX", sdmean = 0.5, fold_threshold = 5, absolute_threshold = 5000, min_mean = 50)
#IPEX ignorm
IPEX_results_ignorm <- detect.hits(ig_data, controls = "BD", group_vector = groupsv,
examine = "IPEX", sdmean = 0.5, fold_threshold = 5, absolute_threshold = 5000, min_mean = 50)
View(SASH3_results_ignorm)
View(SASH3_results_qnorm)
outputs <- list(SASH3_results_ignorm, SASH3_results_qnorm,
RELB_results_ignorm, RELB_results_qnorm,
IPEX_results_ignorm, IPEX_results_qnorm)
View(outputs)
writexl::write_xlsx(outputs, "RESULTS_SASH_RELB_IPEX.xlsx")
View(outputs)
# write the results into a single excel with multiple sheets
outputs <- list("SASH3-IgGn" = SASH3_results_ignorm, "SASH3-Qn" = SASH3_results_qnorm,
"RELB-IgGn" = RELB_results_ignorm, "RELB-Qn" = RELB_results_qnorm,
"IPEX-IgGn" = IPEX_results_ignorm, "IPEX-Qn" = IPEX_results_qnorm)
View(outputs)
writexl::write_xlsx(outputs, "RESULTS_SASH_RELB_IPEX.xlsx")
#' \dontrun{
#' # Assuming 'raw_data' is an RGList object obtained from read.gpr()
#' Meaning run read.gpr first!
#'
#' # Extract data in long format for chambered arrays
#' long_data <- extraction(data = raw_data, array_type = "chambered", format = "long")
#'
#' # Extract data in wide format for huprot arrays
#' wide_data <- extraction(data = raw_data, array_type = "huprot", format = "wide")
#' }
extraction <- function(data, array_type, format = "wide", channel = "R") {
proteins <- data$genes
files <- data$targets
values <- data$channel
array_count <- ncol(values)
combined_list <- vector("list", array_count)
for (i in 1:array_count) {
df <- as.data.frame(proteins)
df$array <- files[[1]][i]
df$value <- values[, i]
combined_list[[i]] <- df
}
df_out <- do.call(rbind, combined_list)
# Validate array_type parameter
if (!(array_type %in% c("chambered", "segmented", "huprot"))) {
stop("Invalid array_type. Please specify 'chambered', 'segmented', or 'huprot'.")
}
if (format == "long" & array_type != "huprot") {
mid <- df_out %>%
dplyr::group_by(array, Block, Name, ID) %>%
dplyr::summarise(Mvalue = mean(value, na.rm = TRUE)) %>%
ungroup()
long_result <- mid %>%
group_by(array, Block, Name) %>%
summarise(Mvalue = if(n() > 5) Mvalue = mean(Mvalue, na.rm = T) else Mvalue) %>%
mutate(Name = make.unique(as.character(Name), sep = ".")) %>%
ungroup()
output <- long_result
message("Data calculated/arranged for chambered/segmented arrays")
message("Long data created based on format input (user defined: long)")
} else if (format == "long" & array_type == "huprot") {
long_result <- df_out %>%
dplyr::group_by(array, Name, Block, Column) %>%
dplyr::summarise(Mvalue = mean(value, na.rm = TRUE)) %>%
dplyr::ungroup() %>%
dplyr::select(-Block, -Column) %>%
dplyr::group_by(array, Name) %>%
dplyr::summarise(Mvalue = if (n() >= 8) mean(Mvalue, na.rm = TRUE) else Mvalue) %>%
dplyr::mutate(Name = make.unique(as.character(Name), sep = "."))
message("Data calculated/arranged for huprot arrays")
message("Long data created based on format input (user defined: long)")
output <- long_result
} else if (format == "wide") {
if (array_type == "chambered" || array_type == "segmented") {
mid <- df_out %>%
dplyr::group_by(array, Block, Name, ID) %>%
dplyr::summarise(Mvalue = mean(value, na.rm = TRUE)) %>%
ungroup()
long_result <- mid %>%
group_by(array, Block, Name) %>%
summarise(Mvalue = if(n() > 5) Mvalue = mean(Mvalue, na.rm = T) else Mvalue) %>%
mutate(Name = make.unique(as.character(Name), sep = ".")) %>%
ungroup()
wide_result <- tidyr::pivot_wider(long_result, names_from = Name, values_from = Mvalue)
message("Data calculated/arranged for chambered/segmented arrays")
transposed_result <- as.data.frame(t(wide_result))
file_names <- as.character(transposed_result[1, ])
array <- paste0("Arr", sapply(basename(file_names), function(x) gsub("[^0-9]", "", x)))
new_colname <- paste0(array, "Block", transposed_result[2,])
corrected_transposed_result <- transposed_result[-c(1, 2), ]
colnames(corrected_transposed_result) <- new_colname
numeric_df <- as.data.frame(lapply(corrected_transposed_result, as.numeric))
numeric_df <- as.data.frame(apply(numeric_df, 2, function(x) round(x, 2)))
rownames(numeric_df) <- rownames(corrected_transposed_result)
} else if (array_type == "huprot") {
long_result <- df_out %>%
dplyr::group_by(array, Name, Block, Column) %>%
dplyr::summarise(Mvalue = mean(value, na.rm = TRUE)) %>%
dplyr::ungroup() %>%
dplyr::select(-Block, -Column) %>%
dplyr::group_by(array, Name) %>%
dplyr::summarise(Mvalue = if (n() >= 8) mean(Mvalue, na.rm = TRUE) else Mvalue) %>%
dplyr::mutate(Name = make.unique(as.character(Name), sep = "."))
wide_result <- tidyr::pivot_wider(long_result, names_from = Name, values_from = Mvalue)
message("Data calculated/arranged for huprot arrays. Duplicate protein names appended with .n --creating dataframe...")
transposed_result <- as.data.frame(t(wide_result))
file_names <- as.character(transposed_result[1, ])
array <- paste0("Arr", sapply(basename(file_names), function(x) gsub("[^0-9]", "", x)))
new_colname <- array
corrected_transposed_result <- as.data.frame(transposed_result[-1, ])
colnames(corrected_transposed_result) <- new_colname
row_names <- rownames(transposed_result)
row_names <- row_names[-1]
numeric_df <- as.data.frame(lapply(corrected_transposed_result, as.numeric))
numeric_df <- as.data.frame(apply(numeric_df, 2, function(x) round(x, 2)))
rownames(numeric_df) <- row_names
} else {
stop("Please define array type. Supports 'chambered', 'segmented', or 'huprot'.")
}
if (nrow(numeric_df) == 0) {
warning("The resulting data frame is empty after processing.")
}
colnames(numeric_df) <- gsub("\\.", "0", colnames(numeric_df))
output <- numeric_df
message("Wide data created based on format input (user defined: wide)")
}
return(output)
}
library(arrayrank)
# 1. collect gpr data and make dataset
raw_data <- read.gpr(bgcorrect = T, fdata = "median")
wide_df <- extraction(raw_data, array_type = "huprot", format = "wide")
wide_df <- extraction(raw_data, array_type = "huprot", format = "wide")
View(raw_data)
#' \dontrun{
#' # Assuming 'raw_data' is an RGList object obtained from read.gpr()
#' Meaning run read.gpr first!
#'
#' # Extract data in long format for chambered arrays
#' long_data <- extraction(data = raw_data, array_type = "chambered", format = "long")
#'
#' # Extract data in wide format for huprot arrays
#' wide_data <- extraction(data = raw_data, array_type = "huprot", format = "wide")
#' }
extraction <- function(data, array_type, format = "wide") {
proteins <- data$genes
files <- data$targets
values <- data$R
array_count <- ncol(values)
combined_list <- vector("list", array_count)
for (i in 1:array_count) {
df <- as.data.frame(proteins)
df$array <- files[[1]][i]
df$value <- values[, i]
combined_list[[i]] <- df
}
df_out <- do.call(rbind, combined_list)
# Validate array_type parameter
if (!(array_type %in% c("chambered", "segmented", "huprot"))) {
stop("Invalid array_type. Please specify 'chambered', 'segmented', or 'huprot'.")
}
if (format == "long" & array_type != "huprot") {
mid <- df_out %>%
dplyr::group_by(array, Block, Name, ID) %>%
dplyr::summarise(Mvalue = mean(value, na.rm = TRUE)) %>%
ungroup()
long_result <- mid %>%
group_by(array, Block, Name) %>%
summarise(Mvalue = if(n() > 5) Mvalue = mean(Mvalue, na.rm = T) else Mvalue) %>%
mutate(Name = make.unique(as.character(Name), sep = ".")) %>%
ungroup()
output <- long_result
message("Data calculated/arranged for chambered/segmented arrays")
message("Long data created based on format input (user defined: long)")
} else if (format == "long" & array_type == "huprot") {
long_result <- df_out %>%
dplyr::group_by(array, Name, Block, Column) %>%
dplyr::summarise(Mvalue = mean(value, na.rm = TRUE)) %>%
dplyr::ungroup() %>%
dplyr::select(-Block, -Column) %>%
dplyr::group_by(array, Name) %>%
dplyr::summarise(Mvalue = if (n() >= 8) mean(Mvalue, na.rm = TRUE) else Mvalue) %>%
dplyr::mutate(Name = make.unique(as.character(Name), sep = "."))
message("Data calculated/arranged for huprot arrays")
message("Long data created based on format input (user defined: long)")
output <- long_result
} else if (format == "wide") {
if (array_type == "chambered" || array_type == "segmented") {
mid <- df_out %>%
dplyr::group_by(array, Block, Name, ID) %>%
dplyr::summarise(Mvalue = mean(value, na.rm = TRUE)) %>%
ungroup()
long_result <- mid %>%
group_by(array, Block, Name) %>%
summarise(Mvalue = if(n() > 5) Mvalue = mean(Mvalue, na.rm = T) else Mvalue) %>%
mutate(Name = make.unique(as.character(Name), sep = ".")) %>%
ungroup()
wide_result <- tidyr::pivot_wider(long_result, names_from = Name, values_from = Mvalue)
message("Data calculated/arranged for chambered/segmented arrays")
transposed_result <- as.data.frame(t(wide_result))
file_names <- as.character(transposed_result[1, ])
array <- paste0("Arr", sapply(basename(file_names), function(x) gsub("[^0-9]", "", x)))
new_colname <- paste0(array, "Block", transposed_result[2,])
corrected_transposed_result <- transposed_result[-c(1, 2), ]
colnames(corrected_transposed_result) <- new_colname
numeric_df <- as.data.frame(lapply(corrected_transposed_result, as.numeric))
numeric_df <- as.data.frame(apply(numeric_df, 2, function(x) round(x, 2)))
rownames(numeric_df) <- rownames(corrected_transposed_result)
} else if (array_type == "huprot") {
long_result <- df_out %>%
dplyr::group_by(array, Name, Block, Column) %>%
dplyr::summarise(Mvalue = mean(value, na.rm = TRUE)) %>%
dplyr::ungroup() %>%
dplyr::select(-Block, -Column) %>%
dplyr::group_by(array, Name) %>%
dplyr::summarise(Mvalue = if (n() >= 8) mean(Mvalue, na.rm = TRUE) else Mvalue) %>%
dplyr::mutate(Name = make.unique(as.character(Name), sep = "."))
wide_result <- tidyr::pivot_wider(long_result, names_from = Name, values_from = Mvalue)
message("Data calculated/arranged for huprot arrays. Duplicate protein names appended with .n --creating dataframe...")
transposed_result <- as.data.frame(t(wide_result))
file_names <- as.character(transposed_result[1, ])
array <- paste0("Arr", sapply(basename(file_names), function(x) gsub("[^0-9]", "", x)))
new_colname <- array
corrected_transposed_result <- as.data.frame(transposed_result[-1, ])
colnames(corrected_transposed_result) <- new_colname
row_names <- rownames(transposed_result)
row_names <- row_names[-1]
numeric_df <- as.data.frame(lapply(corrected_transposed_result, as.numeric))
numeric_df <- as.data.frame(apply(numeric_df, 2, function(x) round(x, 2)))
rownames(numeric_df) <- row_names
} else {
stop("Please define array type. Supports 'chambered', 'segmented', or 'huprot'.")
}
if (nrow(numeric_df) == 0) {
warning("The resulting data frame is empty after processing.")
}
colnames(numeric_df) <- gsub("\\.", "0", colnames(numeric_df))
output <- numeric_df
message("Wide data created based on format input (user defined: wide)")
}
return(output)
}
wide_df <- extraction(raw_data, array_type = "huprot", format = "wide")
library(tidyverse)
wide_df <- extraction(raw_data, array_type = "huprot", format = "wide")
wide_df <- extraction(raw_data, array_type = "huprot", format = "wide")
View(wide_df)
#' \dontrun{
#' # Assuming 'raw_data' is an RGList object obtained from read.gpr()
#' Meaning run read.gpr first!
#'
#' # Extract data in long format for chambered arrays
#' long_data <- extraction(data = raw_data, array_type = "chambered", format = "long")
#'
#' # Extract data in wide format for huprot arrays
#' wide_data <- extraction(data = raw_data, array_type = "huprot", format = "wide")
#' }
extraction <- function(data, array_type, format = "wide", channel = "R") {
proteins <- data$genes
files <- data$targets
values <- data$channel
array_count <- ncol(values)
combined_list <- vector("list", array_count)
for (i in 1:array_count) {
df <- as.data.frame(proteins)
df$array <- files[[1]][i]
df$value <- values[, i]
combined_list[[i]] <- df
}
df_out <- do.call(rbind, combined_list)
# Validate array_type parameter
if (!(array_type %in% c("chambered", "segmented", "huprot"))) {
stop("Invalid array_type. Please specify 'chambered', 'segmented', or 'huprot'.")
}
if (format == "long" & array_type != "huprot") {
mid <- df_out %>%
dplyr::group_by(array, Block, Name, ID) %>%
dplyr::summarise(Mvalue = mean(value, na.rm = TRUE)) %>%
ungroup()
long_result <- mid %>%
group_by(array, Block, Name) %>%
summarise(Mvalue = if(n() > 5) Mvalue = mean(Mvalue, na.rm = T) else Mvalue) %>%
mutate(Name = make.unique(as.character(Name), sep = ".")) %>%
ungroup()
output <- long_result
message("Data calculated/arranged for chambered/segmented arrays")
message("Long data created based on format input (user defined: long)")
} else if (format == "long" & array_type == "huprot") {
long_result <- df_out %>%
dplyr::group_by(array, Name, Block, Column) %>%
dplyr::summarise(Mvalue = mean(value, na.rm = TRUE)) %>%
dplyr::ungroup() %>%
dplyr::select(-Block, -Column) %>%
dplyr::group_by(array, Name) %>%
dplyr::summarise(Mvalue = if (n() >= 8) mean(Mvalue, na.rm = TRUE) else Mvalue) %>%
dplyr::mutate(Name = make.unique(as.character(Name), sep = "."))
message("Data calculated/arranged for huprot arrays")
message("Long data created based on format input (user defined: long)")
output <- long_result
} else if (format == "wide") {
if (array_type == "chambered" || array_type == "segmented") {
mid <- df_out %>%
dplyr::group_by(array, Block, Name, ID) %>%
dplyr::summarise(Mvalue = mean(value, na.rm = TRUE)) %>%
ungroup()
long_result <- mid %>%
group_by(array, Block, Name) %>%
summarise(Mvalue = if(n() > 5) Mvalue = mean(Mvalue, na.rm = T) else Mvalue) %>%
mutate(Name = make.unique(as.character(Name), sep = ".")) %>%
ungroup()
wide_result <- tidyr::pivot_wider(long_result, names_from = Name, values_from = Mvalue)
message("Data calculated/arranged for chambered/segmented arrays")
transposed_result <- as.data.frame(t(wide_result))
file_names <- as.character(transposed_result[1, ])
array <- paste0("Arr", sapply(basename(file_names), function(x) gsub("[^0-9]", "", x)))
new_colname <- paste0(array, "Block", transposed_result[2,])
corrected_transposed_result <- transposed_result[-c(1, 2), ]
colnames(corrected_transposed_result) <- new_colname
numeric_df <- as.data.frame(lapply(corrected_transposed_result, as.numeric))
numeric_df <- as.data.frame(apply(numeric_df, 2, function(x) round(x, 2)))
rownames(numeric_df) <- rownames(corrected_transposed_result)
} else if (array_type == "huprot") {
long_result <- df_out %>%
dplyr::group_by(array, Name, Block, Column) %>%
dplyr::summarise(Mvalue = mean(value, na.rm = TRUE)) %>%
dplyr::ungroup() %>%
dplyr::select(-Block, -Column) %>%
dplyr::group_by(array, Name) %>%
dplyr::summarise(Mvalue = if (n() >= 8) mean(Mvalue, na.rm = TRUE) else Mvalue) %>%
dplyr::mutate(Name = make.unique(as.character(Name), sep = "."))
wide_result <- tidyr::pivot_wider(long_result, names_from = Name, values_from = Mvalue)
message("Data calculated/arranged for huprot arrays. Duplicate protein names appended with .n --creating dataframe...")
transposed_result <- as.data.frame(t(wide_result))
file_names <- as.character(transposed_result[1, ])
array <- paste0("Arr", sapply(basename(file_names), function(x) gsub("[^0-9]", "", x)))
new_colname <- array
corrected_transposed_result <- as.data.frame(transposed_result[-1, ])
colnames(corrected_transposed_result) <- new_colname
row_names <- rownames(transposed_result)
row_names <- row_names[-1]
numeric_df <- as.data.frame(lapply(corrected_transposed_result, as.numeric))
numeric_df <- as.data.frame(apply(numeric_df, 2, function(x) round(x, 2)))
rownames(numeric_df) <- row_names
} else {
stop("Please define array type. Supports 'chambered', 'segmented', or 'huprot'.")
}
if (nrow(numeric_df) == 0) {
warning("The resulting data frame is empty after processing.")
}
colnames(numeric_df) <- gsub("\\.", "0", colnames(numeric_df))
output <- numeric_df
message("Wide data created based on format input (user defined: wide)")
}
return(output)
}
wide_df2 <- extraction(raw_data, array_type = "huprot", format = "wide")
#' \dontrun{
#' # Assuming 'raw_data' is an RGList object obtained from read.gpr()
#' Meaning run read.gpr first!
#'
#' # Extract data in long format for chambered arrays
#' long_data <- extraction(data = raw_data, array_type = "chambered", format = "long")
#'
#' # Extract data in wide format for huprot arrays
#' wide_data <- extraction(data = raw_data, array_type = "huprot", format = "wide")
#' }
extraction <- function(data, array_type, format = "wide", channel = "R") {
proteins <- data$genes
files <- data$targets
values <- data[[channel]]
array_count <- ncol(values)
combined_list <- vector("list", array_count)
for (i in 1:array_count) {
df <- as.data.frame(proteins)
df$array <- files[[1]][i]
df$value <- values[, i]
combined_list[[i]] <- df
}
df_out <- do.call(rbind, combined_list)
# Validate array_type parameter
if (!(array_type %in% c("chambered", "segmented", "huprot"))) {
stop("Invalid array_type. Please specify 'chambered', 'segmented', or 'huprot'.")
}
if (format == "long" & array_type != "huprot") {
mid <- df_out %>%
dplyr::group_by(array, Block, Name, ID) %>%
dplyr::summarise(Mvalue = mean(value, na.rm = TRUE)) %>%
ungroup()
long_result <- mid %>%
group_by(array, Block, Name) %>%
summarise(Mvalue = if(n() > 5) Mvalue = mean(Mvalue, na.rm = T) else Mvalue) %>%
mutate(Name = make.unique(as.character(Name), sep = ".")) %>%
ungroup()
output <- long_result
message("Data calculated/arranged for chambered/segmented arrays")
message("Long data created based on format input (user defined: long)")
} else if (format == "long" & array_type == "huprot") {
long_result <- df_out %>%
dplyr::group_by(array, Name, Block, Column) %>%
dplyr::summarise(Mvalue = mean(value, na.rm = TRUE)) %>%
dplyr::ungroup() %>%
dplyr::select(-Block, -Column) %>%
dplyr::group_by(array, Name) %>%
dplyr::summarise(Mvalue = if (n() >= 8) mean(Mvalue, na.rm = TRUE) else Mvalue) %>%
dplyr::mutate(Name = make.unique(as.character(Name), sep = "."))
message("Data calculated/arranged for huprot arrays")
message("Long data created based on format input (user defined: long)")
output <- long_result
} else if (format == "wide") {
if (array_type == "chambered" || array_type == "segmented") {
mid <- df_out %>%
dplyr::group_by(array, Block, Name, ID) %>%
dplyr::summarise(Mvalue = mean(value, na.rm = TRUE)) %>%
ungroup()
long_result <- mid %>%
group_by(array, Block, Name) %>%
summarise(Mvalue = if(n() > 5) Mvalue = mean(Mvalue, na.rm = T) else Mvalue) %>%
mutate(Name = make.unique(as.character(Name), sep = ".")) %>%
ungroup()
wide_result <- tidyr::pivot_wider(long_result, names_from = Name, values_from = Mvalue)
message("Data calculated/arranged for chambered/segmented arrays")
transposed_result <- as.data.frame(t(wide_result))
file_names <- as.character(transposed_result[1, ])
array <- paste0("Arr", sapply(basename(file_names), function(x) gsub("[^0-9]", "", x)))
new_colname <- paste0(array, "Block", transposed_result[2,])
corrected_transposed_result <- transposed_result[-c(1, 2), ]
colnames(corrected_transposed_result) <- new_colname
numeric_df <- as.data.frame(lapply(corrected_transposed_result, as.numeric))
numeric_df <- as.data.frame(apply(numeric_df, 2, function(x) round(x, 2)))
rownames(numeric_df) <- rownames(corrected_transposed_result)
} else if (array_type == "huprot") {
long_result <- df_out %>%
dplyr::group_by(array, Name, Block, Column) %>%
dplyr::summarise(Mvalue = mean(value, na.rm = TRUE)) %>%
dplyr::ungroup() %>%
dplyr::select(-Block, -Column) %>%
dplyr::group_by(array, Name) %>%
dplyr::summarise(Mvalue = if (n() >= 8) mean(Mvalue, na.rm = TRUE) else Mvalue) %>%
dplyr::mutate(Name = make.unique(as.character(Name), sep = "."))
wide_result <- tidyr::pivot_wider(long_result, names_from = Name, values_from = Mvalue)
message("Data calculated/arranged for huprot arrays. Duplicate protein names appended with .n --creating dataframe...")
transposed_result <- as.data.frame(t(wide_result))
file_names <- as.character(transposed_result[1, ])
array <- paste0("Arr", sapply(basename(file_names), function(x) gsub("[^0-9]", "", x)))
new_colname <- array
corrected_transposed_result <- as.data.frame(transposed_result[-1, ])
colnames(corrected_transposed_result) <- new_colname
row_names <- rownames(transposed_result)
row_names <- row_names[-1]
numeric_df <- as.data.frame(lapply(corrected_transposed_result, as.numeric))
numeric_df <- as.data.frame(apply(numeric_df, 2, function(x) round(x, 2)))
rownames(numeric_df) <- row_names
} else {
stop("Please define array type. Supports 'chambered', 'segmented', or 'huprot'.")
}
if (nrow(numeric_df) == 0) {
warning("The resulting data frame is empty after processing.")
}
colnames(numeric_df) <- gsub("\\.", "0", colnames(numeric_df))
output <- numeric_df
message("Wide data created based on format input (user defined: wide)")
}
return(output)
}
wide_df2 <- extraction(raw_data, array_type = "huprot", format = "wide")
View(wide_df2)
wide_df2 <- extraction(raw_data, array_type = "huprot", format = "wide", channel = "G")
View(wide_df2)
View(wide_df)
View(wide_df2)
View(wide_df2)
View(wide_df)
View(wide_df2)
View(wide_df)
library(roxygen2)
library(devtools)
check()
check()
build()
