data[.,]
View(selected)
selected <- tolower(rownames(data)) %>%
grep("ng/ml", .) %>%
data[.,]
selected <- tolower(rownames(data)) %>%
grep("igg", .) %>%
data[.,]
selected <- tolower(rownames(data)) %>%
grep("ng/ul", .) %>%
data[.,]
View(selected)
selected <- tolower(rownames(data)) %>%
grep("igg&ng/ul", .) %>%
data[.,]
selected <- tolower(rownames(data)) %>%
grep("igg" & "ng/ul", .) %>%
data[.,]
selected <- tolower(rownames(data)) %>%
grep("igg" && "ng/ul", .) %>%
data[.,]
selected <- tolower(rownames(data)) %>%
{data[grepl("igg", .) & grepl("ng/ul", .), ]}
View(selected)
ortalamalar <- apply(selected, 2, mean)
ortalamalar
selected <- tolower(rownames(data)) %>%
grepl("igg", .) & grepl("100ng/ul", .) %>%
data[.,]
library(dplyr)
selected <- tolower(rownames(data)) %>%
grepl("igg", .) & grepl("100ng/ul", .) %>%
data[.,]
selected <- tolower(rownames(data)) %>%
{data[grepl("igg", .) & grepl("100ng/ul", .), ]}
View(selected)
ortalamalar <- apply(selected, 2, mean)
ortalamalar
max(ortalamalar)
min(ortalamalar)
selected <- tolower(rownames(data)) %>%
grep("goatanti-huig", .) %>%
data[.,]
if(nrow(selected) == 0){
selected <- tolower(rownames(data)) %>%
{data[grepl("igg", .) & grepl("100ng/ul", .), ]}
}
ortalamalar <- apply(selected, 2, mean)
multinorm <- function(data, method = "ig"){
data <- as.data.frame(data)
data[] <- lapply(data, as.numeric)
if (ncol(data) == 0 || nrow(data) == 0) {
stop("Data contains no valid numeric columns or rows.")
}
selected <- tolower(rownames(data)) %>%
grep("goatanti-huig", .) %>%
data[.,]
if(nrow(selected) == 0){
selected <- tolower(rownames(data)) %>%
{data[grepl("igg", .) & grepl("100ng/ul", .), ]}
}
ortalamalar <- apply(selected, 2, mean)
beta <- mean(unlist(selected))
logistic_transform <- function(x, b = beta) {
a <- ifelse(x < b/4, 0.005, ifelse(x < b, 0.0005, 0.00025))
1 / (1 + exp(-a * (x - b)))
}
log_trans <- logistic_transform(ortalamalar)
binary <- ifelse(log_trans > 0.1001, T, F)
if (sum(!binary) > 0) {
post_data <- data[, binary, drop = F]
backup <- data[, !binary, drop = F]
message("Extremely low Ig responses detected in: ", paste(colnames(data)[!binary], collapse = ", "),
"\nHighly suggested to exclude these indices from the data. Normalization will continue without altering these columns.")
} else {
post_data <- data
backup <- NULL
message("No columns identified as negative controls. Proceeding with normalization.")
}
if(method == "quantile"){
normed <- as.data.frame(round(limma::normalizeQuantiles(post_data),1))
data[, binary] <- normed
output <- round(data,1)
message("Normalized each column (observations) with limma-Quantile.")
} else if(method == "arrays"){
normed <- as.data.frame(round(limma::normalizeBetweenArrays(post_data),1))
data[, binary] <- normed
output <- round(data,1)
message("Normalized between arrays (Blocks or Huprot) with limma-BetweenArrays.")
} else if(method == "ig"){
oranlar <- max(ortalamalar) / ortalamalar
k <- round(log_trans * oranlar,3)
k <- ifelse(k < 0.05, 1, k)
df2 <- df <- data
for(i in 1:ncol(df)){
df2[, i] <- df[, i] * k[i]
output <- round(df2,1)
}
message("Normalized for Ig values.")
} else {
message("Please define normalization variables correctly.")
}
return(output)
}
qnorm_df <- multinorm(corr_df, method= "quantile")
View(qnorm_df)
qnorm_df <- multinorm(corr_df, method= "ig")
View(qnorm_df)
ortalamalar <- apply(selected, 2, mean)
beta <- mean(unlist(selected))
logistic_transform <- function(x, b = beta) {
a <- ifelse(x < b/4, 0.005, ifelse(x < b, 0.0005, 0.00025))
1 / (1 + exp(-a * (x - b)))
}
log_trans <- logistic_transform(ortalamalar)
log_trans
plot(log_trans)
plot(log_trans, x=ortalamalar)
oranlar <- max(ortalamalar) / ortalamalar
oranlar
k <- round(log_trans * oranlar,3)
k
ortalamalar <- apply(selected, 2, mean)
beta <- mean(unlist(selected))
logistic_transform <- function(x, b = beta) {
a <- ifelse(x < b/5, 0.005, ifelse(x < b, 0.0005, 0.00025))
1 / (1 + exp(-a * (x - b)))
}
log_trans <- logistic_transform(ortalamalar)
plot(log_trans, x=ortalamalar)
beta
logistic_transform <- function(x, b = beta) {
a <- ifelse(x < b/5, 0.005, ifelse(x < b/2, 0.0005, 0.00025))
1 / (1 + exp(-a * (x - b)))
}
log_trans <- logistic_transform(ortalamalar)
plot(log_trans, x=ortalamalar)
log_trans <- logistic_transform(ortalamalar)
binary <- ifelse(log_trans > 0.05, T, F)
if (sum(!binary) > 0) {
post_data <- data[, binary, drop = F]
backup <- data[, !binary, drop = F]
message("Extremely low Ig responses detected in: ", paste(colnames(data)[!binary], collapse = ", "),
"\nHighly suggested to exclude these indices from the data. Normalization will continue without altering these columns.")
} else {
post_data <- data
backup <- NULL
message("No columns identified as negative controls. Proceeding with normalization.")
}
if(method == "quantile"){
normed <- as.data.frame(round(limma::normalizeQuantiles(post_data),1))
data[, binary] <- normed
output <- round(data,1)
message("Normalized each column (observations) with limma-Quantile.")
} else if(method == "arrays"){
normed <- as.data.frame(round(limma::normalizeBetweenArrays(post_data),1))
data[, binary] <- normed
output <- round(data,1)
message("Normalized between arrays (Blocks or Huprot) with limma-BetweenArrays.")
} else if(method == "ig"){
oranlar <- max(ortalamalar) / ortalamalar
k <- round(log_trans * oranlar,3)
k <- ifelse(k < 0.05, 1, k)
df2 <- df <- data
for(i in 1:ncol(df)){
df2[, i] <- df[, i] * k[i]
output <- round(df2,1)
}
message("Normalized for Ig values.")
} else {
message("Please define normalization variables correctly.")
}
multinorm <- function(data, method = "ig"){
data <- as.data.frame(data)
data[] <- lapply(data, as.numeric)
if (ncol(data) == 0 || nrow(data) == 0) {
stop("Data contains no valid numeric columns or rows.")
}
selected <- tolower(rownames(data)) %>%
grep("goatanti-huig", .) %>%
data[.,]
if(nrow(selected) == 0){
selected <- tolower(rownames(data)) %>%
{data[grepl("igg", .) & grepl("100ng/ul", .), ]}
}
ortalamalar <- apply(selected, 2, mean)
beta <- mean(unlist(selected))
logistic_transform <- function(x, b = beta) {
a <- ifelse(x < b/4, 0.005, ifelse(x < b, 0.0005, 0.00025))
1 / (1 + exp(-a * (x - b)))
}
log_trans <- logistic_transform(ortalamalar)
binary <- ifelse(log_trans > 0.05, T, F)
if (sum(!binary) > 0) {
post_data <- data[, binary, drop = F]
backup <- data[, !binary, drop = F]
message("Extremely low Ig responses detected in: ", paste(colnames(data)[!binary], collapse = ", "),
"\nHighly suggested to exclude these indices from the data. Normalization will continue without altering these columns.")
} else {
post_data <- data
backup <- NULL
message("No columns identified as negative controls. Proceeding with normalization.")
}
if(method == "quantile"){
normed <- as.data.frame(round(limma::normalizeQuantiles(post_data),1))
data[, binary] <- normed
output <- round(data,1)
message("Normalized each column (observations) with limma-Quantile.")
} else if(method == "arrays"){
normed <- as.data.frame(round(limma::normalizeBetweenArrays(post_data),1))
data[, binary] <- normed
output <- round(data,1)
message("Normalized between arrays (Blocks or Huprot) with limma-BetweenArrays.")
} else if(method == "ig"){
oranlar <- max(ortalamalar) / ortalamalar
k <- round(log_trans * oranlar,3)
k <- ifelse(k < 0.05, 1, k)
df2 <- df <- data
for(i in 1:ncol(df)){
df2[, i] <- df[, i] * k[i]
output <- round(df2,1)
}
message("Normalized for Ig values.")
} else {
message("Please define normalization variables correctly.")
}
return(output)
}
qnorm_df <- multinorm(corr_df, method= "ig")
View(qnorm_df)
selected <- tolower(rownames(data)) %>%
grep("goatanti-huig", .) %>%
data[.,]
if(nrow(selected) == 0){
selected <- tolower(rownames(data)) %>%
{data[grepl("igg", .) & grepl("100ng/ul", .), ]}
}
ortalamalar <- apply(selected, 2, mean)
beta <- mean(unlist(selected))
logistic_transform <- function(x, b = beta) {
a <- ifelse(x < b/4, 0.005, ifelse(x < b, 0.0005, 0.00025))
1 / (1 + exp(-a * (x - b)))
}
log_trans <- logistic_transform(ortalamalar)
binary <- ifelse(log_trans > 0.05, T, F)
binary
binary <- ifelse(log_trans > 0.075, T, F)
binary
multinorm <- function(data, method = "ig"){
data <- as.data.frame(data)
data[] <- lapply(data, as.numeric)
if (ncol(data) == 0 || nrow(data) == 0) {
stop("Data contains no valid numeric columns or rows.")
}
selected <- tolower(rownames(data)) %>%
grep("goatanti-huig", .) %>%
data[.,]
if(nrow(selected) == 0){
selected <- tolower(rownames(data)) %>%
{data[grepl("igg", .) & grepl("100ng/ul", .), ]}
}
ortalamalar <- apply(selected, 2, mean)
beta <- mean(unlist(selected))
logistic_transform <- function(x, b = beta) {
a <- ifelse(x < b/4, 0.005, ifelse(x < b, 0.0005, 0.00025))
1 / (1 + exp(-a * (x - b)))
}
log_trans <- logistic_transform(ortalamalar)
binary <- ifelse(log_trans > 0.075, T, F)
if (sum(!binary) > 0) {
post_data <- data[, binary, drop = F]
backup <- data[, !binary, drop = F]
message("Extremely low Ig responses detected in: ", paste(colnames(data)[!binary], collapse = ", "),
"\nHighly suggested to exclude these indices from the data. Normalization will continue without altering these columns.")
} else {
post_data <- data
backup <- NULL
message("No columns identified as negative controls. Proceeding with normalization.")
}
if(method == "quantile"){
normed <- as.data.frame(round(limma::normalizeQuantiles(post_data),1))
data[, binary] <- normed
output <- round(data,1)
message("Normalized each column (observations) with limma-Quantile.")
} else if(method == "arrays"){
normed <- as.data.frame(round(limma::normalizeBetweenArrays(post_data),1))
data[, binary] <- normed
output <- round(data,1)
message("Normalized between arrays (Blocks or Huprot) with limma-BetweenArrays.")
} else if(method == "ig"){
oranlar <- max(ortalamalar) / ortalamalar
k <- round(log_trans * oranlar,3)
k <- ifelse(k < 0.05, 1, k)
df2 <- df <- data
for(i in 1:ncol(df)){
df2[, i] <- df[, i] * k[i]
output <- round(df2,1)
}
message("Normalized for Ig values.")
} else {
message("Please define normalization variables correctly.")
}
return(output)
}
qnorm_df <- multinorm(corr_df, method= "ig")
View(qnorm_df)
View(wide_df)
oranlar <- max(ortalamalar) / ortalamalar
k <- round(log_trans * oranlar,3)
k
sum(k < 0.5)
sum(k < 1)
max(qnorm_df)
max(wide_df)
sum(k < 0.6)
multinorm <- function(data, method = "ig"){
data <- as.data.frame(data)
data[] <- lapply(data, as.numeric)
if (ncol(data) == 0 || nrow(data) == 0) {
stop("Data contains no valid numeric columns or rows.")
}
selected <- tolower(rownames(data)) %>%
grep("goatanti-huig", .) %>%
data[.,]
if(nrow(selected) == 0){
selected <- tolower(rownames(data)) %>%
{data[grepl("igg", .) & grepl("100ng/ul", .), ]}
}
ortalamalar <- apply(selected, 2, mean)
beta <- mean(unlist(selected))
logistic_transform <- function(x, b = beta) {
a <- ifelse(x < b/4, 0.005, ifelse(x < b, 0.0005, 0.00025))
1 / (1 + exp(-a * (x - b)))
}
log_trans <- logistic_transform(ortalamalar)
binary <- ifelse(log_trans > 0.075, T, F)
if (sum(!binary) > 0) {
post_data <- data[, binary, drop = F]
backup <- data[, !binary, drop = F]
message("Extremely low Ig responses detected in: ", paste(colnames(data)[!binary], collapse = ", "),
"\nHighly suggested to exclude these indices from the data. Normalization will continue without altering these columns.")
} else {
post_data <- data
backup <- NULL
message("No columns identified as negative controls. Proceeding with normalization.")
}
if(method == "quantile"){
normed <- as.data.frame(round(limma::normalizeQuantiles(post_data),1))
data[, binary] <- normed
output <- round(data,1)
message("Normalized each column (observations) with limma-Quantile.")
} else if(method == "arrays"){
normed <- as.data.frame(round(limma::normalizeBetweenArrays(post_data),1))
data[, binary] <- normed
output <- round(data,1)
message("Normalized between arrays (Blocks or Huprot) with limma-BetweenArrays.")
} else if(method == "ig"){
oranlar <- max(ortalamalar) / ortalamalar
k <- round(log_trans * oranlar,3)
k <- ifelse(k < 0.05, 1, k)
k <- ifelse(k < 0.6, 0.6, k)
df2 <- df <- data
for(i in 1:ncol(df)){
df2[, i] <- df[, i] * k[i]
output <- round(df2,1)
}
message("Normalized for Ig values.")
} else {
message("Please define normalization variables correctly.")
}
return(output)
}
qnorm_df <- multinorm(corr_df, method= "ig")
View(qnorm_df)
multinorm <- function(data, method = "ig"){
data <- as.data.frame(data)
data[] <- lapply(data, as.numeric)
if (ncol(data) == 0 || nrow(data) == 0) {
stop("Data contains no valid numeric columns or rows.")
}
selected <- tolower(rownames(data)) %>%
grep("goatanti-huig", .) %>%
data[.,]
if(nrow(selected) == 0){
selected <- tolower(rownames(data)) %>%
{data[grepl("igg", .) & grepl("100ng/ul", .), ]}
}
ortalamalar <- apply(selected, 2, mean)
beta <- mean(unlist(selected))
logistic_transform <- function(x, b = beta) {
a <- ifelse(x < b/5, 0.005, ifelse(x < b, 0.0005, 0.00025))
1 / (1 + exp(-a * (x - b)))
}
log_trans <- logistic_transform(ortalamalar)
binary <- ifelse(log_trans > 0.075, T, F)
if (sum(!binary) > 0) {
post_data <- data[, binary, drop = F]
backup <- data[, !binary, drop = F]
message("Extremely low Ig responses detected in: ", paste(colnames(data)[!binary], collapse = ", "),
"\nHighly suggested to exclude these indices from the data. Normalization will continue without altering these columns.")
} else {
post_data <- data
backup <- NULL
message("No columns identified as negative controls. Proceeding with normalization.")
}
if(method == "quantile"){
normed <- as.data.frame(round(limma::normalizeQuantiles(post_data),1))
data[, binary] <- normed
output <- round(data,1)
message("Normalized each column (observations) with limma-Quantile.")
} else if(method == "arrays"){
normed <- as.data.frame(round(limma::normalizeBetweenArrays(post_data),1))
data[, binary] <- normed
output <- round(data,1)
message("Normalized between arrays (Blocks or Huprot) with limma-BetweenArrays.")
} else if(method == "ig"){
oranlar <- max(ortalamalar) / ortalamalar
k <- round(log_trans * oranlar,3)
k <- ifelse(k < 0.05, 1, k)
k <- ifelse(k < 0.6, 0.6, k)
df2 <- df <- data
for(i in 1:ncol(df)){
df2[, i] <- df[, i] * k[i]
output <- round(df2,1)
}
message("Normalized for Ig values.")
} else {
message("Please define normalization variables correctly.")
}
return(output)
}
multinorm <- function(data, method = "ig"){
data <- as.data.frame(data)
data[] <- lapply(data, as.numeric)
if (ncol(data) == 0 || nrow(data) == 0) {
stop("Data contains no valid numeric columns or rows.")
}
selected <- tolower(rownames(data)) %>%
grep("goatanti-huig", .) %>%
data[.,]
if(nrow(selected) == 0){
selected <- tolower(rownames(data)) %>%
{data[grepl("igg", .) & grepl("100ng/ul", .), ]}
}
ortalamalar <- apply(selected, 2, mean)
beta <- mean(unlist(selected))
logistic_transform <- function(x, b = beta) {
a <- ifelse(x < b/5, 0.005, ifelse(x < b, 0.0005, 0.00025))
1 / (1 + exp(-a * (x - b)))
}
log_trans <- logistic_transform(ortalamalar)
binary <- ifelse(log_trans > 0.075, T, F)
if (sum(!binary) > 0) {
post_data <- data[, binary, drop = F]
backup <- data[, !binary, drop = F]
message("Extremely low Ig responses detected in: ", paste(colnames(data)[!binary], collapse = ", "),
"\nHighly suggested to exclude these indices from the data. Normalization will continue without altering these columns.")
} else {
post_data <- data
backup <- NULL
message("No columns identified as negative controls. Proceeding with normalization.")
}
if(method == "quantile"){
normed <- as.data.frame(round(limma::normalizeQuantiles(post_data),1))
data[, binary] <- normed
output <- round(data,1)
message("Normalized each column (observations) with limma-Quantile.")
} else if(method == "arrays"){
normed <- as.data.frame(round(limma::normalizeBetweenArrays(post_data),1))
data[, binary] <- normed
output <- round(data,1)
message("Normalized between arrays (Blocks or Huprot) with limma-BetweenArrays.")
} else if(method == "ig"){
oranlar <- max(ortalamalar) / ortalamalar
k <- round(log_trans * oranlar,3)
k <- ifelse(k < 0.05, 1, k)
####placeholder for now:
k <- ifelse(k < 0.7, 0.7, k)
####until better solution comes up.
df2 <- df <- data
for(i in 1:ncol(df)){
df2[, i] <- df[, i] * k[i]
output <- round(df2,1)
}
message("Normalized for Ig values.")
} else {
message("Please define normalization variables correctly.")
}
return(output)
}
wide_df <- extraction(raw_data, array_type = "huprot", format = "wide")
# 2. data correction
corr_df <- replace.low(wide_df, offset = 10)
qnorm_df <- multinorm(corr_df, method= "ig")
# 1. collect gpr data and make dataset
raw_data <- read.gpr(bgcorrect = T, fdata = "median")
wide_df <- extraction(raw_data, array_type = "chambered", format = "wide")
# 1b. identify discordant duplicates in data (to cross-check with ultimate output)
discordants <- discordant(raw_data, array_type = "chambered", fold = 1.5, abs = 1000)
View(discordants)
# 2. data correction
corr_df <- replace.low(wide_df, offset = 10)
qnorm_df <- multinorm(corr_df, method= "ig")
max(qnorm_df)
library(roxygen2)
library(devtools)
roxygenize()
build()
check()
roxygenize()
build()
check()
