min_hit_fc = min(target_hits$fold_change, na.rm = TRUE),
max_hit_fc = max(target_hits$fold_change, na.rm = TRUE)
)
}
})
summary_all_df <- do.call(rbind, summary_list)
summary_hits_only_df <- summary_all_df %>% filter(num_hits > 0)
if(nrow(summary_hits_only_df) > 0) {
summary_hits_only_df <- summary_hits_only_df[order(summary_hits_only_df$rank_hit_value, decreasing = TRUE), ]
summary_hits_only_df$rank <- 1:nrow(summary_hits_only_df)
}
final_output <- c(
list(summary_hits_only = summary_hits_only_df),
list(summary_all_analytes = summary_all_df),
individual_results
)
return(final_output)
} else {
# --- Fast Path: Summary Only (Default) ---
summary_list <- lapply(numerical_analytes, function(analyte_name) {
x_raw <- analysis_data[[analyte_name]]
n_complete <- sum(!is.na(x_raw))
if (sd(x_raw, na.rm = TRUE) == 0 || n_complete < 5) { return(NULL) }
iso <- isotree::isolation.forest(data.frame(value = x_raw), sample_size = n_complete, ntrees = ntrees)
scores <- predict(iso, data.frame(value = x_raw), type = "score")
controls_mask <- analysis_data[[cohort_col]] == neg_cohort_id & !is.na(scores)
control_raws_med <- median(x_raw[controls_mask], na.rm = TRUE)
med <- median(x_raw, na.rm = TRUE)
mad <- mad(x_raw, na.rm = TRUE)
inflec <- med + (mad_multiplier * mad)
raw_sigmoid <- 1 / (1 + exp(-sigmoid_k * (x_raw - inflec)))
score_sigmoid_comp <- scores * raw_sigmoid
FCvsControl <- x_raw / (control_raws_med + 1e-9)
anomaly <- score_sigmoid_comp >= anomaly_scale & !is.na(score_sigmoid_comp)
absolute_raw_threshold <- min(x_raw[anomaly], na.rm = TRUE)
hit_flag <- (x_raw >= absolute_raw_threshold) & (FCvsControl >= fc_threshold)
hit_flag[is.na(hit_flag)] <- FALSE
temp_df <- data.frame(
cohort = analysis_data[[cohort_col]],
raw_value = x_raw,
score_sigmoided = score_sigmoid_comp,
fold_change = FCvsControl,
hit_flag = hit_flag
)
target_hits <- temp_df[temp_df$hit_flag & temp_df$cohort != neg_cohort_id, ]
control_hits <- temp_df[temp_df$hit_flag & temp_df$cohort == neg_cohort_id, ]
num_hits_val <- nrow(target_hits)
target_hit_values <- (log10(target_hits$raw_value)) * (log2(target_hits$fold_change)) * (target_hits$score_sigmoided)
target_hit_values[is.infinite(target_hit_values) | is.nan(target_hit_values)] <- 0
target_score <- sum(target_hit_values, na.rm = TRUE)
control_hit_values <- (log10(control_hits$raw_value)) * (log2(control_hits$fold_change)) * (control_hits$score_sigmoided)
control_hit_values[is.infinite(control_hit_values) | is.nan(control_hit_values)] <- 0
control_penalty <- sum(control_hit_values * penalize, na.rm = TRUE)
total_hit_val <- target_score + control_penalty
if (num_hits_val == 0) {
data.frame(
analyte = analyte_name, num_hits = 0, control_hit_penalty = control_penalty,
total_hit_value = total_hit_val, rank_hit_value = 0,
min_hit_raw_value = NA_real_, max_hit_raw_value = NA_real_,
min_hit_score = NA_real_, max_hit_score = NA_real_,
min_hit_fc = NA_real_, max_hit_fc = NA_real_
)
} else {
rank_hit_val <- total_hit_val * num_hits_val
data.frame(
analyte = analyte_name, num_hits = num_hits_val,
control_hit_penalty = control_penalty, total_hit_value = total_hit_val,
rank_hit_value = rank_hit_val,
min_hit_raw_value = min(target_hits$raw_value, na.rm = TRUE),
max_hit_raw_value = max(target_hits$raw_value, na.rm = TRUE),
min_hit_score = min(target_hits$score_sigmoided, na.rm = TRUE),
max_hit_score = max(target_hits$score_sigmoided, na.rm = TRUE),
min_hit_fc = min(target_hits$fold_change, na.rm = TRUE),
max_hit_fc = max(target_hits$fold_change, na.rm = TRUE)
)
}
})
summary_all_df <- do.call(rbind, summary_list)
summary_hits_only_df <- summary_all_df %>% filter(num_hits > 0)
if(nrow(summary_hits_only_df) > 0) {
summary_hits_only_df <- summary_hits_only_df[order(summary_hits_only_df$rank_hit_value, decreasing = TRUE), ]
summary_hits_only_df$rank <- 1:nrow(summary_hits_only_df)
}
return(summary_hits_only_df)
}
}
results_q3 <- isolate.hits(
data = stored_data$tidied_analysis_set,
sample_id_col = "Sample",
cohort_col = "Group",
neg_cohort_id = "BD",
target_cohort_id = "APS1",
fc_threshold = 10,
anomaly_scale = 0.5,
penalize = -4
)
#' all_data <- assemble.output(key = sample_key, norm_df = normalized_data)
#'
#' # Run isolate.hits on the pre-tidied data frame
#' ranked_hits <- isolate.hits(data = all_data$tidied_analysis_set,
#'                             sample_id_col = "Array",
#'                             cohort_col = "Group",
#'                             controls = "Control",
#'                             examine = "Treatment",
#'                             penalize = -0.5)
#' }
isolate.hits <- function(data,
sample_id_col,
cohort_col,
controls,
examine = NULL,
mad_multiplier = 2,
sigmoid_k = 0.0005,
anomaly_scale = 0.6,
fc_threshold = 10,
ntrees = 200,
penalize = 0,
detailed_results = FALSE) {
# --- 1. Validate inputs and filter data ---
analysis_data <- data
if (!is.null(examine)) {
if (!all(examine %in% unique(analysis_data[[cohort_col]]))) {
stop("One or more examine groups not found.")
}
analysis_data <- analysis_data %>%
filter(!!sym(cohort_col) %in% c(controls, examine))
message("Running targeted analysis on cohort(s): ", paste(examine, collapse=", "))
}
id_cols <- c(sample_id_col, cohort_col)
numerical_analytes <- setdiff(names(analysis_data)[sapply(analysis_data, is.numeric)], id_cols)
if (length(numerical_analytes) == 0) { stop("No numerical columns found to analyze.") }
message("Analyzing ", length(numerical_analytes), " analytes across ", nrow(analysis_data), " samples...")
# --- 2. Main Analysis Logic ---
if (detailed_results) {
# --- Full Path: Detailed Results ---
individual_results <- lapply(numerical_analytes, function(analyte_name) {
result_shell <- analysis_data %>% select(all_of(id_cols))
x_raw <- analysis_data[[analyte_name]]
n_complete <- sum(!is.na(x_raw))
if (sd(x_raw, na.rm = TRUE) == 0 || n_complete < 5) { return(NULL) }
iso <- isotree::isolation.forest(data.frame(value = x_raw), sample_size = n_complete, ntrees = ntrees)
scores <- predict(iso, data.frame(value = x_raw), type = "score")
controls_mask <- analysis_data[[cohort_col]] == controls & !is.na(scores)
control_raws_med <- median(x_raw[controls_mask], na.rm = TRUE)
med <- median(x_raw, na.rm = TRUE)
mad <- mad(x_raw, na.rm = TRUE)
inflec <- med + (mad_multiplier * mad)
raw_sigmoid <- 1 / (1 + exp(-sigmoid_k * (x_raw - inflec)))
score_sigmoid_comp <- scores * raw_sigmoid
FCvsControl <- x_raw / (control_raws_med + 1e-9)
anomaly <- score_sigmoid_comp >= anomaly_scale & !is.na(score_sigmoid_comp)
absolute_raw_threshold <- min(x_raw[anomaly], na.rm = TRUE)
hit_flag <- (x_raw >= absolute_raw_threshold) & (FCvsControl >= fc_threshold)
hit_flag[is.na(hit_flag)] <- FALSE
hit_value <- rep(NA_real_, length(x_raw))
is_hit <- hit_flag == TRUE
if (any(is_hit)) {
hit_value[is_hit] <- (log10(x_raw[is_hit])) * (log2(FCvsControl[is_hit])) * (score_sigmoid_comp[is_hit])
hit_value[is.infinite(hit_value) | is.nan(hit_value)] <- 0
is_control_group <- analysis_data[[cohort_col]] == controls
control_hits_mask <- is_hit & is_control_group
if(any(control_hits_mask)) {
hit_value[control_hits_mask] <- hit_value[control_hits_mask] * penalize
}
}
final_analyte_tbl <- result_shell %>%
mutate(
raw_value = x_raw, if_score = scores, sigmoid = raw_sigmoid,
score_sigmoided = score_sigmoid_comp, fold_change = FCvsControl,
anomaly = anomaly, hit_flag = hit_flag, hit_value = hit_value
)
return(final_analyte_tbl)
})
names(individual_results) <- numerical_analytes
individual_results <- individual_results[!sapply(individual_results, is.null)]
summary_list <- lapply(names(individual_results), function(analyte_name) {
result_df <- individual_results[[analyte_name]]
target_hits <- result_df[result_df$hit_flag & result_df[[cohort_col]] != controls, ]
control_hits <- result_df[result_df$hit_flag & result_df[[cohort_col]] == controls, ]
target_score <- sum(target_hits$hit_value, na.rm = TRUE)
control_penalty <- sum(control_hits$hit_value, na.rm = TRUE)
total_hit_val <- target_score + control_penalty
num_hits_val <- nrow(target_hits)
if (num_hits_val == 0) {
data.frame(
analyte = analyte_name, num_hits = 0, control_hit_penalty = control_penalty,
total_hit_value = total_hit_val, rank_hit_value = 0,
min_hit_raw_value = NA_real_, max_hit_raw_value = NA_real_,
min_hit_score = NA_real_, max_hit_score = NA_real_,
min_hit_fc = NA_real_, max_hit_fc = NA_real_
)
} else {
rank_hit_val <- total_hit_val * num_hits_val
data.frame(
analyte = analyte_name, num_hits = num_hits_val,
control_hit_penalty = control_penalty, total_hit_value = total_hit_val,
rank_hit_value = rank_hit_val,
min_hit_raw_value = min(target_hits$raw_value, na.rm = TRUE),
max_hit_raw_value = max(target_hits$raw_value, na.rm = TRUE),
min_hit_score = min(target_hits$score_sigmoided, na.rm = TRUE),
max_hit_score = max(target_hits$score_sigmoided, na.rm = TRUE),
min_hit_fc = min(target_hits$fold_change, na.rm = TRUE),
max_hit_fc = max(target_hits$fold_change, na.rm = TRUE)
)
}
})
summary_all_df <- do.call(rbind, summary_list)
summary_hits_only_df <- summary_all_df %>% filter(num_hits > 0)
if(nrow(summary_hits_only_df) > 0) {
summary_hits_only_df <- summary_hits_only_df[order(summary_hits_only_df$rank_hit_value, decreasing = TRUE), ]
summary_hits_only_df$rank <- 1:nrow(summary_hits_only_df)
}
final_output <- c(
list(summary_hits_only = summary_hits_only_df),
list(summary_all_analytes = summary_all_df),
individual_results
)
return(final_output)
} else {
# --- Fast Path: Summary Only (Default) ---
summary_list <- lapply(numerical_analytes, function(analyte_name) {
x_raw <- analysis_data[[analyte_name]]
n_complete <- sum(!is.na(x_raw))
if (sd(x_raw, na.rm = TRUE) == 0 || n_complete < 5) { return(NULL) }
iso <- isotree::isolation.forest(data.frame(value = x_raw), sample_size = n_complete, ntrees = ntrees)
scores <- predict(iso, data.frame(value = x_raw), type = "score")
controls_mask <- analysis_data[[cohort_col]] == controls & !is.na(scores)
control_raws_med <- median(x_raw[controls_mask], na.rm = TRUE)
med <- median(x_raw, na.rm = TRUE)
mad <- mad(x_raw, na.rm = TRUE)
inflec <- med + (mad_multiplier * mad)
raw_sigmoid <- 1 / (1 + exp(-sigmoid_k * (x_raw - inflec)))
score_sigmoid_comp <- scores * raw_sigmoid
FCvsControl <- x_raw / (control_raws_med + 1e-9)
anomaly <- score_sigmoid_comp >= anomaly_scale & !is.na(score_sigmoid_comp)
absolute_raw_threshold <- min(x_raw[anomaly], na.rm = TRUE)
hit_flag <- (x_raw >= absolute_raw_threshold) & (FCvsControl >= fc_threshold)
hit_flag[is.na(hit_flag)] <- FALSE
temp_df <- data.frame(
cohort = analysis_data[[cohort_col]],
raw_value = x_raw,
score_sigmoided = score_sigmoid_comp,
fold_change = FCvsControl,
hit_flag = hit_flag
)
target_hits <- temp_df[temp_df$hit_flag & temp_df$cohort != controls, ]
control_hits <- temp_df[temp_df$hit_flag & temp_df$cohort == controls, ]
num_hits_val <- nrow(target_hits)
target_hit_values <- (log10(target_hits$raw_value)) * (log2(target_hits$fold_change)) * (target_hits$score_sigmoided)
target_hit_values[is.infinite(target_hit_values) | is.nan(target_hit_values)] <- 0
target_score <- sum(target_hit_values, na.rm = TRUE)
control_hit_values <- (log10(control_hits$raw_value)) * (log2(control_hits$fold_change)) * (control_hits$score_sigmoided)
control_hit_values[is.infinite(control_hit_values) | is.nan(control_hit_values)] <- 0
control_penalty <- sum(control_hit_values * penalize, na.rm = TRUE)
total_hit_val <- target_score + control_penalty
if (num_hits_val == 0) {
data.frame(
analyte = analyte_name, num_hits = 0, control_hit_penalty = control_penalty,
total_hit_value = total_hit_val, rank_hit_value = 0,
min_hit_raw_value = NA_real_, max_hit_raw_value = NA_real_,
min_hit_score = NA_real_, max_hit_score = NA_real_,
min_hit_fc = NA_real_, max_hit_fc = NA_real_
)
} else {
rank_hit_val <- total_hit_val * num_hits_val
data.frame(
analyte = analyte_name, num_hits = num_hits_val,
control_hit_penalty = control_penalty, total_hit_value = total_hit_val,
rank_hit_value = rank_hit_val,
min_hit_raw_value = min(target_hits$raw_value, na.rm = TRUE),
max_hit_raw_value = max(target_hits$raw_value, na.rm = TRUE),
min_hit_score = min(target_hits$score_sigmoided, na.rm = TRUE),
max_hit_score = max(target_hits$score_sigmoided, na.rm = TRUE),
min_hit_fc = min(target_hits$fold_change, na.rm = TRUE),
max_hit_fc = max(target_hits$fold_change, na.rm = TRUE)
)
}
})
summary_all_df <- do.call(rbind, summary_list)
summary_hits_only_df <- summary_all_df %>% filter(num_hits > 0)
if(nrow(summary_hits_only_df) > 0) {
summary_hits_only_df <- summary_hits_only_df[order(summary_hits_only_df$rank_hit_value, decreasing = TRUE), ]
summary_hits_only_df$rank <- 1:nrow(summary_hits_only_df)
}
return(summary_hits_only_df)
}
}
results_q4 <- isolate.hits(
data = stored_data$tidied_analysis_set,
sample_id_col = "Sample",
cohort_col = "Group",
neg_cohort_id = "BD",
target_cohort_id = "APS1",
fc_threshold = 10,
anomaly_scale = 0.5,
penalize = -4
)
results_q4 <- isolate.hits(
data = stored_data$tidied_analysis_set,
sample_id_col = "Sample",
cohort_col = "Group",
controls = "BD",
examine = "APS1",
fc_threshold = 10,
anomaly_scale = 0.5,
penalize = -4
)
View(results_q4)
warnings()
# 4. detect proteins with hits and rank them
numerical_results <- detect.hits(
stored_data$analysis_set,
controls = "BD",
examine = "APS1",
sdmean = 0.5,
fold_threshold = 10,
absolute_threshold = 5000
)
# 4a. detect hits with numerical approach and rank
numerical_results <- detect.hits(
stored_data$analysis_set,
controls = "BD",
examine = "APS1",
sdmean = 0.5,
fold_threshold = 10,
absolute_threshold = 5000
)
# 4b. detect hits with isolation forest and rank
isolation_results <- isolate.hits(
stored_data$tidied_analysis_set,
sample_id_col = "Sample",
cohort_col = "Group",
controls = "BD",
examine = "APS1",
fc_threshold = 10,
anomaly_scale = 0.5,
penalize = -4
)
View(numerical_results)
View(isolation_results)
View(stored_data)
#'
#' @return A named list of data frames. It includes 'Raw', 'Offset', 'Norm' (for Excel),
#'   as well as wide-format 'analysis_set' and tidy-format 'tidied_analysis_set'
#'   for each of the three data types.
#' @export
#'
#' @importFrom dplyr left_join
#' @importFrom tibble rownames_to_column
#' @importFrom writexl write_xlsx
#'
assemble.output <- function(key, wide_df, corr_df, norm_df,
file_name = "Data_complete.xlsx") {
# Internal helper to create the WIDE format for Excel
.match_key_wide <- function(key, data) {
trans_data <- as.data.frame(t(data))
trans_data <- tibble::rownames_to_column(trans_data, "Array")
merged <- dplyr::left_join(trans_data, key, by = "Array")
meta_cols <- setdiff(names(key), "Array")
meta_rows <- t(merged[, meta_cols, drop = FALSE])
colnames(meta_rows) <- merged$Array
expr_rows <- t(merged[, setdiff(names(merged), c("Array", meta_cols)), drop = FALSE])
colnames(expr_rows) <- merged$Array
out <- rbind(meta_rows, expr_rows)
return(as.data.frame(out))
}
# Internal helper to create the TIDY format
.create_tidy_df <- function(key, data) {
trans_data <- as.data.frame(t(data))
trans_data <- tibble::rownames_to_column(trans_data, "Array")
tidy_df <- dplyr::left_join(key, trans_data, by = "Array")
return(tidy_df)
}
# Internal helper to add protein names to the WIDE format
.add_protein_names <- function(data) {
protein_names <- rownames(data)
output <- cbind(Protein = protein_names, data)
return(output)
}
# --- Process all datasets ---
# Create the original WIDE format data frames for Excel
stored_raw <- .add_protein_names(.match_key_wide(key, wide_df))
stored_offset_corr <- .add_protein_names(.match_key_wide(key, corr_df))
stored_norm <- .add_protein_names(.match_key_wide(key, norm_df))
# --- Create the analysis sets for each data type ---
# Wide format for detect.hits (metadata row removed)
analysis_set_raw <- stored_raw[-2, ]
analysis_set_offset <- stored_offset_corr[-2, ]
analysis_set_norm <- stored_norm[-2, ]
# Tidy format for isolate.hits
tidied_analysis_set_raw <- .create_tidy_df(key, wide_df)
tidied_analysis_set_offset <- .create_tidy_df(key, corr_df)
tidied_analysis_set_norm <- .create_tidy_df(key, norm_df)
# Combine all formats into the final list
stored_data <- list(
# Original outputs for Excel
Raw_Excel = stored_raw,
Offset_Excel = stored_offset_corr,
Norm_Excel = stored_norm,
# Analysis sets for detect.hits
analysis_set_raw = analysis_set_raw,
analysis_set_offset = analysis_set_offset,
analysis_set_norm = analysis_set_norm,
# Analysis sets for isolate.hits
tidied_analysis_set_raw = tidied_analysis_set_raw,
tidied_analysis_set_offset = tidied_analysis_set_offset,
tidied_analysis_set_norm = tidied_analysis_set_norm
)
# --- Export ONLY the first three wide formats to Excel ---
writexl::write_xlsx(
list(Raw = stored_raw, Offset = stored_offset_corr, Norm = stored_norm),
file_name
)
message("Data written to Excel file: ", file_name)
return(stored_data)
}
stored_data2 <- assemble.output(keyfile, wide_df,corr_df,qnorm_df)
View(stored_data2)
View(stored_data2[["analysis_set_raw"]])
View(stored_data2[["tidied_analysis_set_raw"]])
View(stored_data2)
stored_data <- assemble.output(keyfile, wide_df,corr_df,qnorm_df)
# 4a. detect hits with numerical approach and rank
numerical_results <- detect.hits(
stored_data$analysis_set_offset,
controls = "BD",
examine = "APS1",
sdmean = 0.5,
fold_threshold = 10,
absolute_threshold = 5000
)
# 4b. detect hits with isolation forest and rank
isolation_results <- isolate.hits(
stored_data$tidied_analysis_set_offset,
sample_id_col = "Sample",
cohort_col = "Group",
controls = "BD",
examine = "APS1",
fc_threshold = 10,
anomaly_scale = 0.5,
penalize = -4
)
View(isolation_results)
View(numerical_results)
# 1. collect gpr data and make dataset
raw_data <- read.gpr(bgcorrect = T, fdata = "median")
wide_df <- extraction(raw_data, array_type = "huprot", format = "wide")
# 2. data correction
corr_df <- replace.low(wide_df, offset = 10)
qnorm_df <- multinorm(corr_df, method= "quantile")
# 3. data assembly and storage
keyfile <- readxl::read_xlsx(choose.files())
stored_data <- assemble.output(keyfile, wide_df,corr_df,qnorm_df)
# 4a. detect hits with numerical approach and rank
numerical_results <- detect.hits(
stored_data$analysis_set_offset,
controls = "BD",
examine = "APS1",
sdmean = 0.5,
fold_threshold = 10,
absolute_threshold = 5000
)
View(stored_data)
install.packages("arrayrank", dependencies = TRUE)
library(roxygen2)
library(devtools)
check()
check()
check()
build()
install()
install.packages("arrayrank", dependencies = TRUE)
# 1. collect gpr data and make dataset
raw_data <- read.gpr(bgcorrect = T, fdata = "median")
library(arrayrank)
# 1. collect gpr data and make dataset
raw_data <- read.gpr(bgcorrect = T, fdata = "median")
wide_df <- extraction(raw_data, array_type = "huprot", format = "wide")
# 2. data correction
corr_df <- replace.low(wide_df, offset = 10)
qnorm_df <- multinorm(corr_df, method= "quantile")
# 3. data assembly and storage
keyfile <- readxl::read_xlsx(choose.files())
stored_data <- assemble.output(keyfile, wide_df,corr_df,qnorm_df)
View(stored_data)
# 4a. detect hits with numerical approach and rank
numerical_results <- detect.hits(
stored_data$analysis_set_offset,
controls = "BD",
examine = "APS1",
sdmean = 0.5,
fold_threshold = 10,
absolute_threshold = 5000
)
# 4b. detect hits with isolation forest and rank
isolation_results <- isolate.hits(
stored_data$tidied_analysis_set_offset,
sample_id_col = "Sample",
cohort_col = "Group",
controls = "BD",
examine = "APS1",
fold_threshold = 10,
anomaly_scale = 0.5,
penalize = -4
)
View(isolation_results)
library(roxygen2)
library(devtools)
check()
build()
check()
build()
