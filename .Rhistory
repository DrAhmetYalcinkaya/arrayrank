filter(n() == 2) %>%  # Ensure that only groups with 2 duplicates are considered
summarize(
mean = mean(value),
ratio = ifelse(value[2] == 0, 0, round((value[1] / value[2]), 2)),  # Calculate the ratio
abs_diff = abs(value[1] - value[2]),  # Calculate the absolute difference
.groups = 'drop'
)
result_ratio <- long_df %>%
group_by(array_name,Block, Name) %>%
filter(n() == 2) %>%  # Ensure that only groups with 2 duplicates are considered
summarize(
mean = mean(value),
ratio = ifelse(value[2] == 0, 0, round((value[1] / value[2]), 2)),  # Calculate the ratio
abs_diff = abs(value[1] - value[2]),  # Calculate the absolute difference
.groups = 'drop'
)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & abs_diff > 1000), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & abs_diff > (0.5*mean)), T, F))
disc <- subset(discordants, flag ==T)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & (abs_diff > (0.5*mean) & abs_diff > 1000)), T, F))
disc <- subset(discordants, flag ==T)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & (abs_diff > (0.5*mean) & abs_diff > 500)), T, F))
disc <- subset(discordants, flag ==T)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & (abs_diff > (0.5*mean) & mean > 1000)), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
View(discordants)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & (abs_diff > (0.25*mean) & mean > 1000)), T, F))
disc <- subset(discordants, flag ==T)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & (abs_diff > (0.1*mean) & mean > 1000)), T, F))
disc <- subset(discordants, flag ==T)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & (abs_diff > (0.01*mean) & mean > 1000)), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & (abs_diff > (0.01*mean))), T, F))
disc <- subset(discordants, flag ==T)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & (abs_diff > (0.1*mean))), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & (abs_diff > (3*mean))), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
result_ratio <- long_df %>%
group_by(array_name,Block, Name) %>%
filter(n() == 2) %>%
summarize(
mean = mean(value),
ratio = ifelse(last(value) == 0, 0, abs(round((first(value) / last(value))), 2)),
abs_diff = abs(first(value) - last(value)),
.groups = 'drop'
)
result_ratio <- long_df %>%
group_by(array_name,Block, Name) %>%
filter(n() == 2) %>%
summarize(
mean = mean(value),
ratio = ifelse(last(value) == 0, 0, round(abs(first(value) / last(value)), 2)),
abs_diff = abs(first(value) - last(value)),
.groups = 'drop'
)
result_ratio <- long_df %>%
group_by(array_name,Block, Name) %>%
filter(n() == 2) %>%
summarize(
mean = mean(value),
ratio = ifelse(last(value) == 0, 0, round(abs(first(value) / last(value)), 2)),
abs_diff = abs(first(value) - last(value)),
.groups = 'drop'
)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & (abs_diff > (3*mean))), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
result_ratio <- long_df %>%
group_by(array_name,Block, Name) %>%
filter(n() == 2) %>%
summarize(
dup_mean = mean(value),
ratio = ifelse(last(value) == 0, 0, round(abs(first(value) / last(value)), 2)),
abs_diff = abs(first(value) - last(value)),
.groups = 'drop'
)
View(result_ratio)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 2 | ratio < 0.5) & (abs_diff > dup_mean)), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5 | ratio < 0.67) & (abs_diff > dup_mean)), T, F))
disc <- subset(discordants, flag ==T)
result_ratio <- long_df %>%
group_by(array_name,Block, Name) %>%
filter(n() == 2) %>%
summarize(
dup_mean = mean(value),
ratio = ifelse(last(value) == 0, 0, round(abs(max(value) / min(value)), 2)),
abs_diff = abs(first(value) - last(value)),
.groups = 'drop'
)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5 | ratio < 0.67) & (abs_diff > dup_mean)), T, F))
disc2 <- subset(discordants, flag ==T)
View(disc2)
View(disc)
View(disc2)
result_ratio <- long_df %>%
group_by(array_name,Block, Name) %>%
filter(n() == 2) %>%
summarize(
dup_mean = mean(value),
ratio = ifelse(min(value) == 0, 999, round(abs(max(value) / min(value)), 2)),
abs_diff = abs(first(value) - last(value)),
.groups = 'drop'
)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5 | ratio < 0.67) & (abs_diff > dup_mean)), T, F))
disc2 <- subset(discordants, flag ==T)
result_ratio <- long_df %>%
group_by(array_name,Block, Name) %>%
filter(n() == 2) %>%
summarize(
dup_mean = mean(value),
ratio = ifelse(min(value) == 0, 999, round(abs(max(value) / min(value)), 2)),
abs_diff = abs(first(value) - last(value)),
.groups = 'drop'
)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5 | ratio < 0.67) & (abs_diff > 50)), T, F))
disc <- subset(discordants, flag ==T)
View(disc2)
View(disc)
View(disc2)
View(disc)
View(disc2)
View(disc)
View(discordants)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5 | ratio < 0.67) & (abs_diff > dup_mean)), T, F))
disc <- subset(discordants, flag ==T)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5 | ratio < 0.67) & (abs_diff > dup_mean*0.5)), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5 | ratio < 0.67) & ((abs_diff > dup_mean*0.5) & (mean > 50))), T, F))
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5 | ratio < 0.67) & ((abs_diff > dup_mean*0.5) & (dup_mean > 50))), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5) & ((abs_diff > dup_mean*0.5) & (dup_mean > 50))), T, F))
disc <- subset(discordants, flag ==T)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5) & ((abs_diff > dup_mean*0.5) & (dup_mean > 250))), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5) & ((abs_diff > dup_mean*3) & (dup_mean > 250))), T, F))
disc <- subset(discordants, flag ==T)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5) & ((abs_diff > dup_mean*1.5) & (dup_mean > 250))), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5) & ((abs_diff > dup_mean) & (dup_mean > 250))), T, F))
disc <- subset(discordants, flag ==T)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5) & ((abs_diff > dup_mean*0.25) & (dup_mean > 250))), T, F))
disc <- subset(discordants, flag ==T)
View(disc)
user_ratio <- 1.5
user_abs <- 250
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5 & ratio > user_ratio) & ((abs_diff > dup_mean*0.25) & (dup_mean > 250) & abs_diff > user_abs)), T, F))
disc <- subset(discordants, flag ==T)
user_ratio <- 1.5
user_abs <- 0
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5 & ratio > user_ratio) & ((abs_diff > dup_mean*0.25) & (dup_mean > 250) & abs_diff > user_abs)), T, F))
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5) & ((abs_diff > dup_mean*0.25) & (dup_mean > 250))), T, F))
disc <- subset(discordants, flag ==T)
user_ratio <- 1.5
user_abs <- 0
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5 & ratio > user_ratio) & ((abs_diff > dup_mean*0.25) & (dup_mean > 250))), T, F))
disc2 <- subset(discordants, flag ==T)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5 | ratio > user_ratio) & ((abs_diff > dup_mean*0.25 | abs_diff > user_abs) & (dup_mean > 250))), T, F))
disc2 <- subset(discordants, flag ==T)
discordants <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5 | ratio > user_ratio) &
((abs_diff > dup_mean*0.25 | abs_diff > user_abs) & (dup_mean > 250))), T, F))
disc2 <- subset(discordants, flag ==T)
View(disc2)
View(disc)
View(disc2)
View(disc)
View(disc2)
View(result_ratio)
#' @import data.table
#' @import tidyr
#' @import writexl
#' @import readxl
#'
#' @examples
#' \dontrun{
#' # Run the function to select a directory and read .gpr files
#' raw_data <- read.gpr()
#' }
read.gpr <- function(bgcorrect = T) {
if (.Platform$OS.type == "windows") {
directory <- choose.dir()
} else {
directory <- tk_choose.dir()
}
if (is.na(directory) || directory == "") {
return(NULL)
}
files <- list.files(path = directory, pattern = "*.gpr", full.names = T, include.dirs = F)
if (length(files) == 0) {
message("No .gpr files found in the selected directory.")
return(NULL)
}
raw_data <- limma::read.maimages(files, source = "genepix")
raw_data$targets$FileName <- basename(raw_data$targets$FileName)
elements <- c("R", "G", "Rb", "Gb")
if (all(elements %in% names(raw_data)) & bgcorrect == T) {
message("Red, Green channels and background data found to exist, user requested bg correction; subtracting background.")
post_bg <- limma::backgroundCorrect(raw_data, method = "subtract")
} else {
message("No background subtration performed.")
post_bg <- raw_data
}
return(post_bg)
}
raw_data <- read.gpr()
library(dplyr)
library(tidyr)
raw_data <- read.gpr()
df <- raw_data$genes
merged_df <- cbind(df, raw_data$R)
colnames(merged_df) <- basename(colnames(merged_df))
View(merged_df)
long_df <- pivot_longer(merged_df, cols = 6:ncol(merged_df))
View(long_df)
colnames(long_df)[6] <- "array_name"
View(long_df)
result_ratio <- long_df %>%
group_by(array_name, Block, Name) %>%
filter(n() == 2) %>%
summarize(
dup_mean = mean(value),
ratio = ifelse(min(value) == 0, 999, round(abs(max(value) / min(value)), 2)),
abs_diff = abs(first(value) - last(value)),
.groups = 'drop'
)
View(result_ratio)
discordant_flag <- result_ratio %>%
mutate(flag = ifelse(((ratio > 1.5) & ((abs_diff > dup_mean*0.25) & (dup_mean > 250))), T, F))
disc <- subset(discordant_flag, flag ==T)
View(disc)
View(discordant_flag)
writexl::write_xlsx(discordant_flag, "Complete_discordants.xlsx")
writexl::write_xlsx(disc, "discordant_TorF_Sjogren.xlsx")
discordant <- function(data, fold = 1.5, abs = 500){
df <- data$genes
merged_df <- cbind(df, data$R)
colnames(merged_df) <- basename(colnames(merged_df))
long_df <- pivot_longer(merged_df, cols = 6:ncol(merged_df))
colnames(long_df)[6] <- "array_name"
result <- long_df %>%
group_by(array_name, Block, Name) %>%
filter(n() == 2) %>%
summarize(
dup_mean = mean(value),
ratio = ifelse(min(value) == 0, 999, round(abs(max(value) / min(value)), 2)),
abs_diff = abs(first(value) - last(value)),
.groups = 'drop'
)
flagged <- result %>%
mutate(flag = ifelse(((ratio > fold | ratio > fold) &
((abs_diff > dup_mean*0.25 | abs_diff > abs) &
(dup_mean > 250))), T, F))
disc <- subset(flagged, flag ==T)
return(disc)
}
discordant <- function(data, fold = 1.5, abs = 500){
df <- data$genes
merged_df <- cbind(df, data$R)
colnames(merged_df) <- basename(colnames(merged_df))
long_df <- pivot_longer(merged_df, cols = 6:ncol(merged_df))
colnames(long_df)[6] <- "array_name"
result <- long_df %>%
group_by(array_name, Block, Name) %>%
filter(n() == 2) %>%
summarize(
dup_mean = mean(value),
ratio = ifelse(min(value) == 0, 999, round(abs(max(value) / min(value)), 2)),
abs_diff = abs(first(value) - last(value)),
.groups = 'drop'
)
flagged <- result %>%
mutate(flag = ifelse(((ratio > fold) &
((abs_diff > dup_mean*0.25 & abs_diff > abs) &
(dup_mean > 250))), T, F))
disc <- subset(flagged, flag ==T)
return(disc)
}
a <- read.gpr()
library(arrayrank)
a <- read.gpr()
discordant(a, fold = 1.5, abs = 250)
library(dplyr)
library(tidyr)
discordant(a, fold = 1.5, abs = 250)
b <- discordant(a, fold = 1.5, abs = 250)
View(b)
b <- discordant(a, fold = 1.5, abs = 1000)
View(b)
discordant <- function(data, fold = 1.5, abs = 500){
df <- data$genes
merged_df <- cbind(df, data$R)
colnames(merged_df) <- basename(colnames(merged_df))
long_df <- pivot_longer(merged_df, cols = 6:ncol(merged_df))
colnames(long_df)[6] <- "array_name"
result <- long_df %>%
group_by(array_name, Block, Name) %>%
filter(n() == 2) %>%
summarize(
dup1 = first(value),
dup2 = last(value),
dup_mean = mean(value),
ratio = ifelse(min(value) == 0, 999, round(abs(max(value) / min(value)), 2)),
abs_diff = abs(first(value) - last(value)),
.groups = 'drop'
)
flagged <- result %>%
mutate(flag = ifelse(((ratio > fold) &
((abs_diff > dup_mean*0.25 & abs_diff > abs) &
(dup_mean > 250))), T, F))
disc <- subset(flagged, flag ==T)
return(disc)
}
b <- discordant(a, fold = 1.5, abs = 1000)
View(b)
# 1. collect gpr data and make dataset
raw_data <- read.gpr(bgcorrect = T)
wide_df <- extraction(raw_data, array_type = "chambered", format = "wide")
# 1b. identify discordant duplicates in data (to cross-check with ultimate output)
discordants <- discordant(raw_data, fold = 1.5, abs = 1000)
View(discordants)
library(roxygen2)
library(devtools)
roxygenize()
roxygenize()
build()
check()
roxygenize()
roxygenize()
build()
check()
check()
roxygenize()
build()
check()
detach("package:arrayrank", unload = TRUE)
remove.packages("arrayrank")
detach("package:arrayrank", unload = TRUE)
library(devtools)
devtools::install_github("DrAhmetYalcinkaya/arrayrank")
library(arrayrank)
# 1. collect gpr data and make dataset
raw_data <- read.gpr(bgcorrect = T)
# 1. collect gpr data and make dataset
raw_data <- read.gpr(bgcorrect = T)
roxygenize()
library(arrayrank)
# 1. collect gpr data and make dataset
raw_data <- read.gpr(bgcorrect = T)
wide_df <- extraction(raw_data, array_type = "chambered", format = "wide")
# 1b. identify discordant duplicates in data (to cross-check with ultimate output)
discordants <- discordant(raw_data, fold = 1.5, abs = 1000)
# 2. data correction
corr_df <- replace.low(wide_df, offset = 10)
qnorm_df <- multinorm(corr_df, method= "quantile")
max(qnorm_df)
qnorm_df <- multinorm(corr_df, method= "protein", protein = 447)
max(qnorm_df)
# 3. storage and backup
qstore_df <- store.df(qnorm_df)
View(qstore_df)
multinorm <- function(data, method = "quantile", protein = NULL){
data <- as.data.frame(data)
data[] <- lapply(data, as.numeric)
original_col_order <- colnames(data)
if (ncol(data) == 0 || nrow(data) == 0) {
stop("Data contains no valid numeric columns or rows.")
}
subject_medians <- apply(data, 2, median)
overall_median <- median(unlist(data))
lows <- apply(data, 2, function(x) x < overall_median)
n_lows <- colSums(lows)
cut_lows <- which(n_lows > (0.9 * nrow(data)))
excluded_columns <- NULL
if (length(cut_lows) > 0) {
excluded_columns <- data[, cut_lows, drop = FALSE]
message("It appears that ", paste(colnames(data)[cut_lows], collapse = ", "),
" are negative controls (non-sample).\nHighly suggested to exclude these indices from normalization.")
response <- readline(prompt = "Would you like to exclude these indices from normalization? Enter 'yes' or 'no': ")
if (tolower(response) == "yes") {
data <- data[, -cut_lows, drop = FALSE]
message("Excluded the identified negative control columns from normalization.")
} else {
excluded_columns <- NULL
message("Proceeding without excluding any columns.")
}
} else {
message("No columns identified as negative controls. Proceeding with normalization.")
}
if(method == "quantile"){
output <- as.data.frame(limma::normalizeQuantiles(data))
message("Normalized each column (observations) with limma-Quantile.")
} else if(method == "arrays"){
output <- as.data.frame(limma::normalizeBetweenArrays(data))
message("Normalized between arrays (Blocks or Huprot) with limma-BetweenArrays.")
} else if(method == "protein"){
if(is.null(protein) || protein > nrow(data) || protein <= 0){
stop("Please provide a valid row index for the protein parameter. Should range from 1 to ", nrow(data), " (the latter is protein count)")
}
protein_mean <- mean(as.numeric(data[protein,]))
mean_sample_ratio <- (protein_mean / data[protein,])
output <- sweep(data, 2, as.numeric(mean_sample_ratio), `*`)
message(paste("Normalized according to", rownames(data)[protein], "values."))
message(paste("NOTES: Max value in input data was:", max(data), "\nMax value in output data is:", round(max(output),2),
"\nMax values greater than 2-3 fold of 65000 may cause overestimation in hit detection.",
"\nIn such a case, please consider quantile or between-arrays normalization instead of protein-based normalization."))
} else {
stop("Please define normalization parameters correctly.")
}
if (!is.null(excluded_columns)) {
output <- cbind(output, excluded_columns)
output <- output[, original_col_order]
}
return(output)
}
qnorm_df <- multinorm(corr_df, method= "protein", protein = 447)
#' @export
#'
#' @import dplyr
#' @import tidyr
#'
#' @examples
#' \dontrun{
#' # Assuming 'raw_data' is an RGList object obtained from read.gpr()
#' discordant_duplicates <- discordant(data = raw_data)
#' }
discordant <- function(data, fold = 1.5, abs = 500){
df <- data$genes
merged_df <- cbind(df, data$R)
colnames(merged_df) <- basename(colnames(merged_df))
long_df <- tidyr::pivot_longer(merged_df, cols = 6:ncol(merged_df))
colnames(long_df)[6] <- "array_name"
result <- long_df %>%
dplyr::group_by(array_name, Block, Name) %>%
dplyr::filter(dplyr::n() == 2) %>%
dplyr::summarize(
dup1 = dplyr::first(value),
dup2 = dplyr::last(value),
dup_mean = mean(value),
ratio = ifelse(dplyr::min(value) == 0, 999, round(abs(dplyr::max(value) / dplyr::min(value)), 2)),
abs_diff = abs(dplyr::first(value) - dplyr::last(value)),
.groups = 'drop'
)
flagged <- result %>%
dplyr::mutate(flag = ifelse(
(ratio > fold) &
((abs_diff > dup_mean * 0.25 & abs_diff > abs) &
(dup_mean > 250)), TRUE, FALSE))
disc <- subset(flagged, flag == TRUE)
return(disc)
}
# 1b. identify discordant duplicates in data (to cross-check with ultimate output)
discordants <- discordant(raw_data, fold = 1.5, abs = 1000)
# 1. collect gpr data and make dataset
raw_data <- read.gpr(bgcorrect = T)
wide_df <- extraction(raw_data, array_type = "chambered", format = "wide")
# 1b. identify discordant duplicates in data (to cross-check with ultimate output)
discordants <- discordant(raw_data, fold = 1.5, abs = 1000)
library(tidyr)
library(dplyr)
# 1b. identify discordant duplicates in data (to cross-check with ultimate output)
discordants <- discordant(raw_data, fold = 1.5, abs = 1000)
library(roxygen2)
library(devtools)
roxygenize()
roxygenize()
build()
check()
